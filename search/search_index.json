{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview MongoDB plugin helps to virtualize mongoDB data source leveraging the built-in mongoDB technologies like Replication, Mongodump/MongoRestore, Mongo OpsManager Backups: Supported Mongo Technologies for Ingestion (create dSource) : Mongodump : Export source data and import into Staging mongo instance (dSource). Useful for offline/online backups of small databases (onprem, Saas, MongoAtlas) Replication : Add replicaset member to existing cluster. Fastest way to capture incrementals from the source. Mongo Ops Manager : Leverage existing backups, downloaded as compressed file(s), from Mongo OPS Manager. This mechanism can be used for ingesting sharded mongo database backups. Ingestion Types: dSource Type Mechanism Zero Touch Prod Description Support Incrementals Seed New Mongo Instance N/A New empty mongo instance created by delphix. This is for development of new applications without ingesting data from any source. N/A extendedcluster Add member to existing replicaset N Add member to existing source replicaset. Instant and near realtime incremental data capture in delphix Y onlinemongodump mongodump N Delphix connects to source from staging environments, executes mongodump utility and captures source data. Delphix captures all databases from the mongo instance. N offlinemongodump mongodump Y Delphix leverages existing mongodumps made available to staging host. Supports backups taken using mongodump --oplog --gzip -o < bkp_dir > OR mongodump --gzip -o < bkp_dir > command. database dumps for 1 or more database OR 1 or more collections is supported. N shardedsource Mongo OPS Manager Backups Y Delphix leverages existing mongo ops manager backups of sharded source as backup files presented to staging host. Delphix expects 1 configserver backup file and 1 backup file per shard available in backup location. N nonshardedsource Mongo OPS Manager Backups Y Delphix leverages existing mongo ops manager backup of non sharded source. Backup file need to be available on staging host file system. N stagingpush User created mongo instance Y/N Delphix provides filesystem on Staging host that can be used for deploying mongo instance by User. User responsible to create working mongo instance on staging host either manually or using any tools like mongo ops manager after the filesystem creation. Y/N Zero Touch Prod (Y) = Interaction with Source Server is not required by Delphix. Zero Touch Prod (N) = Interaction with Source Server is needed by Delphix. Delphix expects connection to source using credentials etc. Seed This type of dSource is generally used for pure development purpose. There is no source instance associated with it. It creates a empty instance which is managed by delphix and helps to create virtual mongo instance to avail benefits of all delphix features. Mongodump (offlinemongodump) This type of dsource is created using mongodump backup file(s) of source mongo instance. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource. Mongodump (onlinemongodump) This type of dsource is created using mongodump backup of source mongo instance. It helps to create dsource using online backup. Policy can be scheduled to capture Periodic backup and generate timeline of dsource. Extended Cluster (extendedcluster) This type of dsource is created by adding secondary member to existing source cluster. This member does not participate in voting and never becomes primary nor serves any read operations. Its the fastest way of capturing incrementals. Policy can be set to take snapshots to generate desired timeline. Mongo OPS Manager backups (shardedmongo) This type of dsource is created using backup files of source mongo instance created by mongo ops manager. It helps to create dsource of sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource. Mongo OPS Manager backups (nonshardedmongo replicaet) This type of dsource is created using backup file of source mongo instance created by mongo ops manager. It helps to create dsource of non-sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource. Staging Push (stagingpush) This type of dsource can be created in multiple ways. It varies based on use case. It can be created manually, copy of files at o/s level or using tools like Mongo OPS Manager. Below are some of the methods that can be used to create mongo instance on stagingpush delphix filesystem. Note: Delphix only exhibits the operations needed to capture data. Creation and Deletion of Mongo Instance on staging host will be responsibility of user. New Mongo Database Create new dSource of type stagingpush and Capture name of mountpoint filesystem provided to delphix while creating dsource. Create new empty single member mongo replicaset cluster using Mongo OPS Manager or by any other tool/mechanism. Make sure to use same delphix mountpoint path used in dsource creation, appended with /s0m0 , as location for datafiles. Also use same port that was provided while creating dSource. You can optionally restore any required data on this instance using mongorestore or scripts. Update permissions of mongo files if any other user is used to create mongo instance than configured environment user in delphix. e.g. login as root su -m mongod -c 'chmod -R 775 /mnt/provision/stagingpush/s0m0' OR login as mongod chmod -R 775 /mnt/provision/stagingpush/s0m0 Note : Delphix always appends /s0m0 as subfolder to the filesystem provuded while creating stagingpush dSource. If /mnt/provision/stagingpush was provided as mountpoint while creating dsource, provide /mnt/provision/stagingpush/s0m0 as datafile location while creating mongo Instance manually or via tools. Restore Mongo Database backup using Mongo OPS Manager [ Non-Sharded ONLY ] Create new dSource of type stagingpush and Capture name of mountpoint filesystem, replicaset name provided to delphix while creating dsource. Create new empty single member mongo replicaset cluster using Mongo OPS Manager or by any other tool/mechanism. Make sure to use same delphix mountpoint path used in dsource creation, appended with s0m0 as location for datafiles. Also use same port and replicaset name that was provided while creating dSource. Select desired backup to restore from Mongo OPS Manager. Restore backup to existing cluster and select the name of cluster that was created for dSource. Mongo OPS Manager will restore backup replacing existing data (empty instance) and keep same port and datafile location. Once the restoration is complete, Take snapshot from delphix and discard/delete any snapshots that was created before restoring database. Update permissions of mongo files if any other user is used to create mongo instance than configured environment user in delphix. e.g. login as root su -m mongod -c 'chmod -R 775 /mnt/provision/stagingpush/s0m0' OR login as mongod chmod -R 775 /mnt/provision/stagingpush/s0m0 Note : Delphix always appends /s0m0 as subfolder to the filesystem provided while creating stagingpush dSource. If /mnt/provision/stagingpush was provided as mountpoint while creating dsource, provide /mnt/provision/stagingpush/s0m0 as datafile location while creating mongo Instance manually or via tools. Create Mongo Secondary Instance [ Non-Sharded ONLY ] Create new dSource of type stagingpush and Capture name of mountpoint filesystem provided to delphix while creating dsource. Provide correct primary source hostname, port and replicaset name during dSource creation. Modify existing replicaset Cluster using OPS Manager or Manually. Add new hidden member to existing replicaset. Make sure to use same delphix mountpoint path used in dsource creation, appended with s0m0 as location for datafiles. Also use same port that was provided while creating dSource. Set Votes = 0, Priority = 0. This will ensure this member never contributes in election and never becomes primary. Mongo will start replicating data from existing node to newly created instance. Once the initial sync is complete, Take snapshot of dsource from delphix and discard/delete any snapshots that were created before initial sync was completed. Update permissions of mongo files if any other user is used to create mongo instance than configured environment user in delphix. e.g. login as root su -m mongod -c 'chmod -R 775 /mnt/provision/stagingpush/s0m0' OR login as mongod chmod -R 775 /mnt/provision/stagingpush/s0m0 Note : Delphix always appends /s0m0 as subfolder to the filesystem provuded while creating stagingpush dSource. If /mnt/provision/stagingpush was provided as mountpoint while creating dsource, provide /mnt/provision/stagingpush/s0m0 as datafile location while creating mongo Instance manually or via tools.","title":"Overview"},{"location":"#overview","text":"MongoDB plugin helps to virtualize mongoDB data source leveraging the built-in mongoDB technologies like Replication, Mongodump/MongoRestore, Mongo OpsManager Backups: Supported Mongo Technologies for Ingestion (create dSource) : Mongodump : Export source data and import into Staging mongo instance (dSource). Useful for offline/online backups of small databases (onprem, Saas, MongoAtlas) Replication : Add replicaset member to existing cluster. Fastest way to capture incrementals from the source. Mongo Ops Manager : Leverage existing backups, downloaded as compressed file(s), from Mongo OPS Manager. This mechanism can be used for ingesting sharded mongo database backups.","title":"Overview"},{"location":"#ingestion-types","text":"dSource Type Mechanism Zero Touch Prod Description Support Incrementals Seed New Mongo Instance N/A New empty mongo instance created by delphix. This is for development of new applications without ingesting data from any source. N/A extendedcluster Add member to existing replicaset N Add member to existing source replicaset. Instant and near realtime incremental data capture in delphix Y onlinemongodump mongodump N Delphix connects to source from staging environments, executes mongodump utility and captures source data. Delphix captures all databases from the mongo instance. N offlinemongodump mongodump Y Delphix leverages existing mongodumps made available to staging host. Supports backups taken using mongodump --oplog --gzip -o < bkp_dir > OR mongodump --gzip -o < bkp_dir > command. database dumps for 1 or more database OR 1 or more collections is supported. N shardedsource Mongo OPS Manager Backups Y Delphix leverages existing mongo ops manager backups of sharded source as backup files presented to staging host. Delphix expects 1 configserver backup file and 1 backup file per shard available in backup location. N nonshardedsource Mongo OPS Manager Backups Y Delphix leverages existing mongo ops manager backup of non sharded source. Backup file need to be available on staging host file system. N stagingpush User created mongo instance Y/N Delphix provides filesystem on Staging host that can be used for deploying mongo instance by User. User responsible to create working mongo instance on staging host either manually or using any tools like mongo ops manager after the filesystem creation. Y/N Zero Touch Prod (Y) = Interaction with Source Server is not required by Delphix. Zero Touch Prod (N) = Interaction with Source Server is needed by Delphix. Delphix expects connection to source using credentials etc.","title":" Ingestion Types:"},{"location":"#seed","text":"This type of dSource is generally used for pure development purpose. There is no source instance associated with it. It creates a empty instance which is managed by delphix and helps to create virtual mongo instance to avail benefits of all delphix features.","title":"Seed"},{"location":"#mongodump-offlinemongodump","text":"This type of dsource is created using mongodump backup file(s) of source mongo instance. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Mongodump (offlinemongodump)"},{"location":"#mongodump-onlinemongodump","text":"This type of dsource is created using mongodump backup of source mongo instance. It helps to create dsource using online backup. Policy can be scheduled to capture Periodic backup and generate timeline of dsource.","title":"Mongodump (onlinemongodump)"},{"location":"#extended-cluster-extendedcluster","text":"This type of dsource is created by adding secondary member to existing source cluster. This member does not participate in voting and never becomes primary nor serves any read operations. Its the fastest way of capturing incrementals. Policy can be set to take snapshots to generate desired timeline.","title":"Extended Cluster (extendedcluster)"},{"location":"#mongo-ops-manager-backups-shardedmongo","text":"This type of dsource is created using backup files of source mongo instance created by mongo ops manager. It helps to create dsource of sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Mongo OPS Manager backups (shardedmongo)"},{"location":"#mongo-ops-manager-backups-nonshardedmongo-replicaet","text":"This type of dsource is created using backup file of source mongo instance created by mongo ops manager. It helps to create dsource of non-sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Mongo OPS Manager backups (nonshardedmongo replicaet)"},{"location":"#staging-push-stagingpush","text":"This type of dsource can be created in multiple ways. It varies based on use case. It can be created manually, copy of files at o/s level or using tools like Mongo OPS Manager. Below are some of the methods that can be used to create mongo instance on stagingpush delphix filesystem. Note: Delphix only exhibits the operations needed to capture data. Creation and Deletion of Mongo Instance on staging host will be responsibility of user.","title":"Staging Push (stagingpush)"},{"location":"#new-mongo-database","text":"Create new dSource of type stagingpush and Capture name of mountpoint filesystem provided to delphix while creating dsource. Create new empty single member mongo replicaset cluster using Mongo OPS Manager or by any other tool/mechanism. Make sure to use same delphix mountpoint path used in dsource creation, appended with /s0m0 , as location for datafiles. Also use same port that was provided while creating dSource. You can optionally restore any required data on this instance using mongorestore or scripts. Update permissions of mongo files if any other user is used to create mongo instance than configured environment user in delphix. e.g. login as root su -m mongod -c 'chmod -R 775 /mnt/provision/stagingpush/s0m0' OR login as mongod chmod -R 775 /mnt/provision/stagingpush/s0m0 Note : Delphix always appends /s0m0 as subfolder to the filesystem provuded while creating stagingpush dSource. If /mnt/provision/stagingpush was provided as mountpoint while creating dsource, provide /mnt/provision/stagingpush/s0m0 as datafile location while creating mongo Instance manually or via tools.","title":"New Mongo Database"},{"location":"#restore-mongo-database-backup-using-mongo-ops-manager-non-sharded-only","text":"Create new dSource of type stagingpush and Capture name of mountpoint filesystem, replicaset name provided to delphix while creating dsource. Create new empty single member mongo replicaset cluster using Mongo OPS Manager or by any other tool/mechanism. Make sure to use same delphix mountpoint path used in dsource creation, appended with s0m0 as location for datafiles. Also use same port and replicaset name that was provided while creating dSource. Select desired backup to restore from Mongo OPS Manager. Restore backup to existing cluster and select the name of cluster that was created for dSource. Mongo OPS Manager will restore backup replacing existing data (empty instance) and keep same port and datafile location. Once the restoration is complete, Take snapshot from delphix and discard/delete any snapshots that was created before restoring database. Update permissions of mongo files if any other user is used to create mongo instance than configured environment user in delphix. e.g. login as root su -m mongod -c 'chmod -R 775 /mnt/provision/stagingpush/s0m0' OR login as mongod chmod -R 775 /mnt/provision/stagingpush/s0m0 Note : Delphix always appends /s0m0 as subfolder to the filesystem provided while creating stagingpush dSource. If /mnt/provision/stagingpush was provided as mountpoint while creating dsource, provide /mnt/provision/stagingpush/s0m0 as datafile location while creating mongo Instance manually or via tools.","title":"Restore Mongo Database backup using Mongo OPS Manager  [ Non-Sharded ONLY ]"},{"location":"#create-mongo-secondary-instance-non-sharded-only","text":"Create new dSource of type stagingpush and Capture name of mountpoint filesystem provided to delphix while creating dsource. Provide correct primary source hostname, port and replicaset name during dSource creation. Modify existing replicaset Cluster using OPS Manager or Manually. Add new hidden member to existing replicaset. Make sure to use same delphix mountpoint path used in dsource creation, appended with s0m0 as location for datafiles. Also use same port that was provided while creating dSource. Set Votes = 0, Priority = 0. This will ensure this member never contributes in election and never becomes primary. Mongo will start replicating data from existing node to newly created instance. Once the initial sync is complete, Take snapshot of dsource from delphix and discard/delete any snapshots that were created before initial sync was completed. Update permissions of mongo files if any other user is used to create mongo instance than configured environment user in delphix. e.g. login as root su -m mongod -c 'chmod -R 775 /mnt/provision/stagingpush/s0m0' OR login as mongod chmod -R 775 /mnt/provision/stagingpush/s0m0 Note : Delphix always appends /s0m0 as subfolder to the filesystem provuded while creating stagingpush dSource. If /mnt/provision/stagingpush was provided as mountpoint while creating dsource, provide /mnt/provision/stagingpush/s0m0 as datafile location while creating mongo Instance manually or via tools.","title":"Create Mongo Secondary Instance  [ Non-Sharded ONLY ]"},{"location":"Architecture/","text":"Architecture Overview Various Mongo configurations ranging from Standalone to multi-node replicaset can be used with Delphix. This article contains an overview of how Delphix works with Mongo. There are three key concepts when using Delphix with any data platform: Environments : The server and software required to run a data set. For Mongo, this will be an operating system host with Mongo instances running on it. a. Staging Environment: Source data is ingested into Delphix using Staging Host. These will be used to create dSources. b. Target Environment: Target hosts to provision VDBs. These need Mongo installations that correspond to the versions of the Source environments, per our Mongo Support Matrix. dSource : A database that the Delphix Virtualization Engine uses to create and update virtual copies of your database VDB : A database provisioned from either a dSource or another VDB which is a copy of the source data. A VDB is created and managed by the Delphix Virtualization Engine. Explore how Delphix connects to Mongo environments and creates Mongo dSources and VDBs, with these concepts in mind. Environment Linking and Provisioning Architecture As shown in the diagram below Delphix begins by ingesting data from your source database / backups to create dSources. Data is ingested using existing backups on Disk or by connecting to Source. Once you have added an environment, Delphix will discover required Mongo binaries on it. Consolidated Seed, Extended Cluster, Offline/Online mongodump, Mongo Atlas, Non-Sharded Ingestion Types Sharded Mongo Ingestion Type","title":"Architecture"},{"location":"Architecture/#architecture","text":"","title":"Architecture"},{"location":"Architecture/#overview","text":"Various Mongo configurations ranging from Standalone to multi-node replicaset can be used with Delphix. This article contains an overview of how Delphix works with Mongo. There are three key concepts when using Delphix with any data platform: Environments : The server and software required to run a data set. For Mongo, this will be an operating system host with Mongo instances running on it. a. Staging Environment: Source data is ingested into Delphix using Staging Host. These will be used to create dSources. b. Target Environment: Target hosts to provision VDBs. These need Mongo installations that correspond to the versions of the Source environments, per our Mongo Support Matrix. dSource : A database that the Delphix Virtualization Engine uses to create and update virtual copies of your database VDB : A database provisioned from either a dSource or another VDB which is a copy of the source data. A VDB is created and managed by the Delphix Virtualization Engine. Explore how Delphix connects to Mongo environments and creates Mongo dSources and VDBs, with these concepts in mind.","title":"Overview"},{"location":"Architecture/#environment-linking-and-provisioning-architecture","text":"As shown in the diagram below Delphix begins by ingesting data from your source database / backups to create dSources. Data is ingested using existing backups on Disk or by connecting to Source. Once you have added an environment, Delphix will discover required Mongo binaries on it.","title":"Environment Linking and Provisioning Architecture"},{"location":"Architecture/#consolidated-seed-extended-cluster-offlineonline-mongodump-mongo-atlas-non-sharded-ingestion-types","text":"","title":"Consolidated Seed, Extended Cluster, Offline/Online mongodump, Mongo Atlas, Non-Sharded Ingestion Types"},{"location":"Architecture/#sharded-mongo-ingestion-type","text":"","title":"Sharded Mongo Ingestion Type"},{"location":"Discovery/","text":"Discovery Environment discovery is a process that enables the mongoDB Plugin to determine mongo installation details on a host. Whenever there is any changes (installing a new binary home) to an already set up environment in the Delphix application, environment refresh need to be performed. Prerequisites Install delphix engine 6.0.7.x and above Install mongo binaries on staging and target servers Installation of the mongoDB Plugin is required before the discovery Environment variable $MONGO_PATH should be set on staging/target host using $HOME/.setDelphixMongoEnv and MONGO_REPO_CFGFILE , which contains binary path of mongo using below procedure. Mongo Binaries Discovery Mongo can be installed in different ways and so the path can vary in different environments. To discover correct binaries, follow steps as below Steps: Login to the Staging Host as delphix os user. Create a file name \u201c.setDelphixMongoEnv\u201d in home directory of delphix user. touch $HOME/.setDelphixMongoEnv Define variable pointing to config file for manual discovery of mongodb instances. Example as below. echo \"MONGO_REPO_CFGFILE=/home/delphix/.mongorepos.txt\" > $HOME/.setDelphixMongoEnv Define full path to mongod binary in file represented by $MONGO_REPO_CFGFILE. Example as below. source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb428/bin/mongod\" > $MONGO_REPO_CFGFILE If there are multiple version binaries, specify each on separate lines as below source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb428/bin/mongod\" > $MONGO_REPO_CFGFILE echo \"MONGO_PATH=/u01/mongodb509/bin/mongod\" >> $MONGO_REPO_CFGFILE If the MongoDB database tools are installed at different location, specify the MongoDB tools path on separate lines as below source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb428/bin/mongod:/u01/mongodb428/mongodb-database-tools/bin\" > $MONGO_REPO_CFGFILE echo \"MONGO_PATH=/u01/mongodb509/bin/mongod:/u01/mongodb509/mongodb-database-tools/bin\" > $MONGO_REPO_CFGFILE Login to the Delphix Management application. Click Manage. Select Environments. In the Environments panel, click the name of the environment you want to refresh. Select the Refresh icon. In the Refresh confirmation dialog select Refresh. Sourceconfig Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource.","title":"Discovery"},{"location":"Discovery/#discovery","text":"Environment discovery is a process that enables the mongoDB Plugin to determine mongo installation details on a host. Whenever there is any changes (installing a new binary home) to an already set up environment in the Delphix application, environment refresh need to be performed.","title":"Discovery"},{"location":"Discovery/#prerequisites","text":"Install delphix engine 6.0.7.x and above Install mongo binaries on staging and target servers Installation of the mongoDB Plugin is required before the discovery Environment variable $MONGO_PATH should be set on staging/target host using $HOME/.setDelphixMongoEnv and MONGO_REPO_CFGFILE , which contains binary path of mongo using below procedure.","title":"Prerequisites"},{"location":"Discovery/#mongo-binaries-discovery","text":"Mongo can be installed in different ways and so the path can vary in different environments. To discover correct binaries, follow steps as below Steps: Login to the Staging Host as delphix os user. Create a file name \u201c.setDelphixMongoEnv\u201d in home directory of delphix user. touch $HOME/.setDelphixMongoEnv Define variable pointing to config file for manual discovery of mongodb instances. Example as below. echo \"MONGO_REPO_CFGFILE=/home/delphix/.mongorepos.txt\" > $HOME/.setDelphixMongoEnv Define full path to mongod binary in file represented by $MONGO_REPO_CFGFILE. Example as below. source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb428/bin/mongod\" > $MONGO_REPO_CFGFILE If there are multiple version binaries, specify each on separate lines as below source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb428/bin/mongod\" > $MONGO_REPO_CFGFILE echo \"MONGO_PATH=/u01/mongodb509/bin/mongod\" >> $MONGO_REPO_CFGFILE If the MongoDB database tools are installed at different location, specify the MongoDB tools path on separate lines as below source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb428/bin/mongod:/u01/mongodb428/mongodb-database-tools/bin\" > $MONGO_REPO_CFGFILE echo \"MONGO_PATH=/u01/mongodb509/bin/mongod:/u01/mongodb509/mongodb-database-tools/bin\" > $MONGO_REPO_CFGFILE Login to the Delphix Management application. Click Manage. Select Environments. In the Environments panel, click the name of the environment you want to refresh. Select the Refresh icon. In the Refresh confirmation dialog select Refresh.","title":"Mongo Binaries Discovery"},{"location":"Discovery/#sourceconfig","text":"Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource.","title":"Sourceconfig"},{"location":"InstallPlugin/","text":"Install Plugin Delphix plugin for MongoDB can be installed via GUI or using command prompt (developer environment) Prerequisites Install delphix engine compatible with the MongoDB plugin version as per support matrix Install MongoDB Plugin Following 2 methods can be used for upload Mongo plugin to Delphix DevOps Platform. Using GUI Click on Manage and then Plugins Click on + icon Click on Upload or Upgrade a plugin Select the build(artifacts.json) Click on close button See the plugin version in Plugins section Using dvp (on command prompt) dvp upload -a <Plugin-artifact.json> -e <Delphix_Engine_Name> -u <username> --password <password> Delphix Engine\u2019s documentation on installing plugins: PluginManagement","title":"Install Plugin"},{"location":"InstallPlugin/#install-plugin","text":"Delphix plugin for MongoDB can be installed via GUI or using command prompt (developer environment)","title":"Install Plugin"},{"location":"InstallPlugin/#prerequisites","text":"Install delphix engine compatible with the MongoDB plugin version as per support matrix","title":"Prerequisites"},{"location":"InstallPlugin/#install-mongodb-plugin","text":"Following 2 methods can be used for upload Mongo plugin to Delphix DevOps Platform.","title":"Install MongoDB Plugin"},{"location":"InstallPlugin/#using-gui","text":"Click on Manage and then Plugins Click on + icon Click on Upload or Upgrade a plugin Select the build(artifacts.json) Click on close button See the plugin version in Plugins section","title":"Using GUI"},{"location":"InstallPlugin/#using-dvp-on-command-prompt","text":"dvp upload -a <Plugin-artifact.json> -e <Delphix_Engine_Name> -u <username> --password <password> Delphix Engine\u2019s documentation on installing plugins: PluginManagement","title":"Using dvp (on command prompt)"},{"location":"Limitations/","text":"Limitations V2P not supported Password Vault not supported PITR not supported","title":"Limitations"},{"location":"Limitations/#limitations","text":"V2P not supported Password Vault not supported PITR not supported","title":"Limitations"},{"location":"Linking/","text":"Linking Linking a data source will create a dSource object on the engine and allow Delphix to ingest data from this source. The dSource is an object that the Delphix Virtualization Engine uses to create and update virtual copies of your database. Prerequisites Install delphix engine 6.0.7.0 and above Install mongo binaries on staging host Execute Discovery on staging host Create Sourceconfig Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource. Login to the Delphix Management application. Click Manage. Select Environments. Select the repository Click on + icon ( Shown in next image ) Add required details in Add database section. identity field : Proivide unique name for staging database discoveryType : Keep it as manual Click Add button Create dSource dSource is delphix representation of source database copy. Following are the steps to create dSource. Login to Delphix Management application. Click Manage > Datasets Click on Add dSource . In the Add dSource wizard, select the mongo source config you just created on the staging host. Select the dSource type from the drop-down available on dSource wizard. Refer different dSource Types Enter the mongo-specific parameters for your dSource configuration. Proceed with wizard and submit to create dSource. Note: For stagingpush dSource Type, Please ignore 1st snapshot. Once the staging instance is created by user, take a new snapshot and delete all previous snapshots to avoid empty datafile/file provisioning. dSource Parameters Parameter Description dSource Type dSource Type Type of dSource shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Source MongoDB Host Connect String Source Instance Connect String / Staging Instance Connect String (for stagingpush) onlinemongodump, extendedcluster Replicaset Name Source Replicaset name (for RESTORE MONGO DATABASE BACKUP USING MONGO OPS MANAGER [ NON-SHARDED ONLY ]) stagingpush MongoDB Source Database User Source database user / Staging Instance Connect String (for stagingpush) onlinemongodump, extendedcluster MongoDB Password Source database password / Staging Instance Connect String (for stagingpush) onlinemongodump, extendedcluster Capture oplogs of replicaset (ONLY for onlinemongodump) Capture oplogs while running online mongodump onlinemongodump Staging MongoDB Host Staging host for creating dSource shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Staging Port Staging host Port for Mongo dSource Instance shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Mongos Port Port to be used for mongos router instance shardedsource bindIP String IP Binding - default 0.0.0.0 shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Oplog Size Size of oplogs shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Journal commit Interval Journal commit Internal in ms shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Storage Engine Storage Engine - wiredTiger shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Mount Path Mount Path for dsource mongo instance datafiles shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Backup Metadata File Name File that contains backup datetime - Content : MMDDYYYY_HH24MISS shardedsource, nonshardedsource, offlinemongodump Mongo Admin User Mongo Admin User on Staging Host shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush MongoDB Password Mongo Admin User Password on Staging Host shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Config Server Backup File (sharded mongo) replicaset backup file (nonsharded mongo) Backup directory for Mongodump Config Server Backup File Name replicaset backup file (nonsharded mongo) Backup directory for Mongodump shardedsource offlinemongodump, onlinemongodump offlinemongodump, onlinemongodump Shard Backup Files Shard Backup File Full Path. Add File for each Shard. I file per shard shardedsource Enable SSL/TLS Enable SSL/ TLS shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush SSL/TLS Parameters SSL/TLS Parameters (e.g. tlsMode, tlsCAFile, tlsPEMKeyFile, sslAllowConnectionsWithoutCertificates etc) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Enable Authentication Enable Authentication shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush keyfile_path KeyAuth keyfile name (Full Path) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Cluster Auth Mode None, keyFile, x509, sendKeyFile, sendX509 shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Source is Encrypted Does source mongo instance use encryption ? shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Source Encryption Method KeyFile, KMIP shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Local Encryption Keyfile Full path of KeyFile if used for encryption shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush KMIP Parameters KMIP Parameter details ( e.g. kmipClientCertificateFile, kmipPort, kmipServerCAFile, kmipServerName ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Enable LDAP Enable LDAP Authentication / Authorization shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush LDAP Parameters LDAP Parameter details ( e.g. ldapBindMethod, ldapQueryPassword, ldapServers, ldapTimeoutMS ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Enable Auditlog Enable Auditlog Parameters shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Auditlog Parameters Auditlog Parameter details ( e.g. auditDestination, auditFilter ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Enable SetParams Enable SetParams shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush SetParams Parameters SetParams Parameter details ( e.g. authenticationMechanisms, opensslCipherConfig ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Client Certificate for Mongos / Mongo Session on Primary Node Client Certificate for Mongos / Mongo Session on Primary Node shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Client CA Certificate for Mongos / Mongo Session on Primary Node Client CA Certificate for Mongos / Mongo Session on Primary Node shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Following Sections are in form of Parameter Name and Value format. Add as many parameters needed by clicking on +Add button. - SSL/TLS Parameters - KMIP Parameters - LDAP Parameters - Auditlog Parameters - SetParams Parameters Note: Any parameters specified for above section need to be compatible with mongod / mongos command line parameters. Please refer Mongo Documentation for appropriate names of parameters. Please do not specify \u201c\u2013\u201d when adding any parameters. Sample Parameters are as below for SSL/TLS Parameters section tlsMode tlsCAFile tlsPEMKeyFile sslAllowConnectionsWithoutCertificates For dSource type of offlinemongodump, nonshardedsource and shardedsource, Backup Metadata File parameter is mandatory. Content of this file should be a single line datetime value specified in format of MMDDYYYY_HH24MISS. This content lets delphix know if there is any new backup uploaded on staging host, different from previous snapshot. Delphix checks this file based on snapsync policy to find if new backup is available for ingestion. No other checks on backups are done. If date is updated, delphix assumes there are new backup files available in backup location. Delphix will reingest backup and take new snapshot. This file need to be updated manually OR as a part of backup/copy script. Following command can be added to backup script that will be executed as soon as the backup is successful or backup copy is successful. echo \"`date '+%m%d%Y_%H%M%S'`\" > /FULL_PATH_TO_METADATA_FILE/mongo_bkp_metadata.txt File name and path can be any as per orgnanization standard naming convention. For shardedmongo, 1 configserver backup file and 1 backup file per shard is expected. It is important to keep name of backup files same for every new backup. If the file names are changed, it need to be updated in GUI parameters every time a new backup is uploaded. It is recommended to use some standard naming convention for sharded backups. Sample as below. - configsvr_bkp.tar.gz - myShard_n_bkp.tar.gz ( where n = 0 to total number of shards ) e.g. - configsvr_bkp.tar.gz - myShard_0_bkp.tar.gz - myShard_1_bkp.tar.gz - myShard_2_bkp.tar.gz","title":"Linking"},{"location":"Linking/#linking","text":"Linking a data source will create a dSource object on the engine and allow Delphix to ingest data from this source. The dSource is an object that the Delphix Virtualization Engine uses to create and update virtual copies of your database.","title":"Linking"},{"location":"Linking/#prerequisites","text":"Install delphix engine 6.0.7.0 and above Install mongo binaries on staging host Execute Discovery on staging host","title":"Prerequisites"},{"location":"Linking/#create-sourceconfig","text":"Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource. Login to the Delphix Management application. Click Manage. Select Environments. Select the repository Click on + icon ( Shown in next image ) Add required details in Add database section. identity field : Proivide unique name for staging database discoveryType : Keep it as manual Click Add button","title":"Create Sourceconfig"},{"location":"Linking/#create-dsource","text":"dSource is delphix representation of source database copy. Following are the steps to create dSource. Login to Delphix Management application. Click Manage > Datasets Click on Add dSource . In the Add dSource wizard, select the mongo source config you just created on the staging host. Select the dSource type from the drop-down available on dSource wizard. Refer different dSource Types Enter the mongo-specific parameters for your dSource configuration. Proceed with wizard and submit to create dSource. Note: For stagingpush dSource Type, Please ignore 1st snapshot. Once the staging instance is created by user, take a new snapshot and delete all previous snapshots to avoid empty datafile/file provisioning.","title":"Create dSource"},{"location":"Linking/#dsource-parameters","text":"Parameter Description dSource Type dSource Type Type of dSource shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Source MongoDB Host Connect String Source Instance Connect String / Staging Instance Connect String (for stagingpush) onlinemongodump, extendedcluster Replicaset Name Source Replicaset name (for RESTORE MONGO DATABASE BACKUP USING MONGO OPS MANAGER [ NON-SHARDED ONLY ]) stagingpush MongoDB Source Database User Source database user / Staging Instance Connect String (for stagingpush) onlinemongodump, extendedcluster MongoDB Password Source database password / Staging Instance Connect String (for stagingpush) onlinemongodump, extendedcluster Capture oplogs of replicaset (ONLY for onlinemongodump) Capture oplogs while running online mongodump onlinemongodump Staging MongoDB Host Staging host for creating dSource shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Staging Port Staging host Port for Mongo dSource Instance shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Mongos Port Port to be used for mongos router instance shardedsource bindIP String IP Binding - default 0.0.0.0 shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Oplog Size Size of oplogs shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Journal commit Interval Journal commit Internal in ms shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Storage Engine Storage Engine - wiredTiger shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Mount Path Mount Path for dsource mongo instance datafiles shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Backup Metadata File Name File that contains backup datetime - Content : MMDDYYYY_HH24MISS shardedsource, nonshardedsource, offlinemongodump Mongo Admin User Mongo Admin User on Staging Host shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush MongoDB Password Mongo Admin User Password on Staging Host shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Config Server Backup File (sharded mongo) replicaset backup file (nonsharded mongo) Backup directory for Mongodump Config Server Backup File Name replicaset backup file (nonsharded mongo) Backup directory for Mongodump shardedsource offlinemongodump, onlinemongodump offlinemongodump, onlinemongodump Shard Backup Files Shard Backup File Full Path. Add File for each Shard. I file per shard shardedsource Enable SSL/TLS Enable SSL/ TLS shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush SSL/TLS Parameters SSL/TLS Parameters (e.g. tlsMode, tlsCAFile, tlsPEMKeyFile, sslAllowConnectionsWithoutCertificates etc) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Enable Authentication Enable Authentication shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush keyfile_path KeyAuth keyfile name (Full Path) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Cluster Auth Mode None, keyFile, x509, sendKeyFile, sendX509 shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Source is Encrypted Does source mongo instance use encryption ? shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed, stagingpush Source Encryption Method KeyFile, KMIP shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Local Encryption Keyfile Full path of KeyFile if used for encryption shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush KMIP Parameters KMIP Parameter details ( e.g. kmipClientCertificateFile, kmipPort, kmipServerCAFile, kmipServerName ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Enable LDAP Enable LDAP Authentication / Authorization shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush LDAP Parameters LDAP Parameter details ( e.g. ldapBindMethod, ldapQueryPassword, ldapServers, ldapTimeoutMS ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Enable Auditlog Enable Auditlog Parameters shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Auditlog Parameters Auditlog Parameter details ( e.g. auditDestination, auditFilter ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Enable SetParams Enable SetParams shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush SetParams Parameters SetParams Parameter details ( e.g. authenticationMechanisms, opensslCipherConfig ) shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Client Certificate for Mongos / Mongo Session on Primary Node Client Certificate for Mongos / Mongo Session on Primary Node shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Client CA Certificate for Mongos / Mongo Session on Primary Node Client CA Certificate for Mongos / Mongo Session on Primary Node shardedsource, nonshardedsource, offlinemongodump, onlinemongodump, extendedcluster, seed. stagingpush Following Sections are in form of Parameter Name and Value format. Add as many parameters needed by clicking on +Add button. - SSL/TLS Parameters - KMIP Parameters - LDAP Parameters - Auditlog Parameters - SetParams Parameters Note: Any parameters specified for above section need to be compatible with mongod / mongos command line parameters. Please refer Mongo Documentation for appropriate names of parameters. Please do not specify \u201c\u2013\u201d when adding any parameters. Sample Parameters are as below for SSL/TLS Parameters section tlsMode tlsCAFile tlsPEMKeyFile sslAllowConnectionsWithoutCertificates For dSource type of offlinemongodump, nonshardedsource and shardedsource, Backup Metadata File parameter is mandatory. Content of this file should be a single line datetime value specified in format of MMDDYYYY_HH24MISS. This content lets delphix know if there is any new backup uploaded on staging host, different from previous snapshot. Delphix checks this file based on snapsync policy to find if new backup is available for ingestion. No other checks on backups are done. If date is updated, delphix assumes there are new backup files available in backup location. Delphix will reingest backup and take new snapshot. This file need to be updated manually OR as a part of backup/copy script. Following command can be added to backup script that will be executed as soon as the backup is successful or backup copy is successful. echo \"`date '+%m%d%Y_%H%M%S'`\" > /FULL_PATH_TO_METADATA_FILE/mongo_bkp_metadata.txt File name and path can be any as per orgnanization standard naming convention. For shardedmongo, 1 configserver backup file and 1 backup file per shard is expected. It is important to keep name of backup files same for every new backup. If the file names are changed, it need to be updated in GUI parameters every time a new backup is uploaded. It is recommended to use some standard naming convention for sharded backups. Sample as below. - configsvr_bkp.tar.gz - myShard_n_bkp.tar.gz ( where n = 0 to total number of shards ) e.g. - configsvr_bkp.tar.gz - myShard_0_bkp.tar.gz - myShard_1_bkp.tar.gz - myShard_2_bkp.tar.gz","title":"dSource Parameters"},{"location":"Operations/","text":"Operations Following are the list of operations and workflow associated with dSource and VDB operations: dSource Operations Linking / Create dSource : Linking a data source will create a dSource object on the engine and allow Delphix to ingest data from this source. The dSource is an object that the Delphix Virtualization Engine uses to create and update virtual copies of your database. Once a dSource has been linked, you can begin to perform dSource operations on it such as enable, disable, detach, delete, resync and more. Snapsync ( dSource Snapshot ) : Snapsync is the process used by the Delphix Engine to create a Snapshot of dSource. An initial SnapSync is performed to create a copy of data on the Delphix Engine. Incremental SnapSyncs are performed to update the copy of data on the Delphix Engine. Snapsync ( dSource Snapshot with Params ) : This method preserves the Source Timeflow with no impact to existing virtual databases (VDBs). Repair Source Timeflow after a corruption. This will use parameters defined for dSource creation and execute whole process as if its creating new dSource but maintains preserves previous timeflow so that VDBs are not impacted. Note : This will use parameters defined and resynchronize the dsource. Disable : This will disable dSource and filesystem related to dSource will be unmounted from Staging host. dSource will not be monitored till it is enabled. Enable : This will enable dSource that is in disabled state. VDB Operations Provisioning / Create VDB : Create new virtual database using snapshot of dSource. Snapshot : Capture current state of database as a snapshot which can be used to create child VDB or rewind database to a particular snapshot. Enable : This will enable VDB that is in disabled state. Database is started in read write mode. Disable : This will disable VDB and filesystem related to VDB will be unmounted from Target host. VDB will not be monitored till it is enabled. Stop : Stop database on Target host. Filesystem stays mounted. Start : Start database that is in stop mode. Disabled database need to be enabled.","title":"Operations"},{"location":"Operations/#operations","text":"Following are the list of operations and workflow associated with dSource and VDB operations:","title":"Operations"},{"location":"Operations/#dsource-operations","text":"Linking / Create dSource : Linking a data source will create a dSource object on the engine and allow Delphix to ingest data from this source. The dSource is an object that the Delphix Virtualization Engine uses to create and update virtual copies of your database. Once a dSource has been linked, you can begin to perform dSource operations on it such as enable, disable, detach, delete, resync and more. Snapsync ( dSource Snapshot ) : Snapsync is the process used by the Delphix Engine to create a Snapshot of dSource. An initial SnapSync is performed to create a copy of data on the Delphix Engine. Incremental SnapSyncs are performed to update the copy of data on the Delphix Engine. Snapsync ( dSource Snapshot with Params ) : This method preserves the Source Timeflow with no impact to existing virtual databases (VDBs). Repair Source Timeflow after a corruption. This will use parameters defined for dSource creation and execute whole process as if its creating new dSource but maintains preserves previous timeflow so that VDBs are not impacted. Note : This will use parameters defined and resynchronize the dsource. Disable : This will disable dSource and filesystem related to dSource will be unmounted from Staging host. dSource will not be monitored till it is enabled. Enable : This will enable dSource that is in disabled state.","title":"dSource Operations"},{"location":"Operations/#vdb-operations","text":"Provisioning / Create VDB : Create new virtual database using snapshot of dSource. Snapshot : Capture current state of database as a snapshot which can be used to create child VDB or rewind database to a particular snapshot. Enable : This will enable VDB that is in disabled state. Database is started in read write mode. Disable : This will disable VDB and filesystem related to VDB will be unmounted from Target host. VDB will not be monitored till it is enabled. Stop : Stop database on Target host. Filesystem stays mounted. Start : Start database that is in stop mode. Disabled database need to be enabled.","title":"VDB Operations"},{"location":"PluginDevelopment/","text":"Build plugin Create python3 virtual environment and install required libraries (dvp, pytest, pytest-html & pytest-cov) cd <full path of project directory till ` mongo-plugin ` > source bin/activate For example: cd /u01/github/delphix/Plugins/mongo-plugin source bin/activate pip install dvp = 4 .0.0 Build the source code. It generates the build with name artifacts.json : dvp build Upload plugin Upload the artifacts.json ( generated in step 3 ) on Delphix Engine: dvp upload -e <Delphix_Engine_Name> -u <username> --password <password> Debug plugin logs Download the plugin logs using below command: dvp download-logs -c plugin_config.yml -e <Delphix_Engine_Name> -u admin --password <password>","title":"PluginDevelopment"},{"location":"PluginDevelopment/#build-plugin","text":"Create python3 virtual environment and install required libraries (dvp, pytest, pytest-html & pytest-cov) cd <full path of project directory till ` mongo-plugin ` > source bin/activate For example: cd /u01/github/delphix/Plugins/mongo-plugin source bin/activate pip install dvp = 4 .0.0 Build the source code. It generates the build with name artifacts.json : dvp build","title":"Build plugin"},{"location":"PluginDevelopment/#upload-plugin","text":"Upload the artifacts.json ( generated in step 3 ) on Delphix Engine: dvp upload -e <Delphix_Engine_Name> -u <username> --password <password>","title":"Upload plugin"},{"location":"PluginDevelopment/#debug-plugin-logs","text":"Download the plugin logs using below command: dvp download-logs -c plugin_config.yml -e <Delphix_Engine_Name> -u admin --password <password>","title":"Debug plugin logs"},{"location":"Provisioning/","text":"Provisioning This topic describes the basic concepts involved with provisioning VDBs for Mongo. A dSource is a virtualized representation of a physical or logical source database. You can create a virtual database (VDB) from a dSource snapshot. A VDB is an independent, writable copy of a dSource snapshot. You can also create VDBs from other VDB. Once you have provisioned a VDB to a target environment, you can also implement snapshot and retention policies for the VDB, which will determine how frequently Delphix Engine will take a database snapshot and how long the snapshots will be retained for recovery and provisioning purposes. Snapshots accumulate over time. To view a snapshot: From the Datasets panel, click the group containing the dSource. Select dSource. Click the TimeFlow tab. The TimeFlow appears as a list of dates, each of which expands to show snapshots from that date. Bring the cursor on desired snapshot of dSource, provision icon appears, click on provision icon. Provide parameters to provision VDB, Follow the wizard and submit to provision VDB. Once you provisioned a VDB, you can also take snapshots of it. As with the dSource snapshots, you can find these when you select the VDB in the Datasets panel. You can then provision additional VDBs from these VDB snapshots. Provisioning VDB This topic describes how to provision a virtual database (VDB) from a mongo dSource. Prerequisites Install delphix engine 6.0.7.x and above Install mongo binaries on Staging host Add Staging Environment Create dSource Install mongo binaries on Target host Add Target environment Create VDB Procedure: Login to the Delphix Management GUI. Click Manage. Select Datasets. Select a dSource. Select a snapshot from which you want to provision. Click Provision VDB icon to open Provision VDB wizard. Select a target environment from the left pane. Select an Installation to use from the dropdown list of available mongo binaries on that environment. Select the Environment User. Enter VDB parameters. VDB Parameters Parameter Description Mount Path Mount Path for VDB mongo instance datafiles bindIP String IP Binding - default 0.0.0.0 Target Port / Target Port Pool for Mongo Instance(s). Specify only first port for sharded mongo For non-sharded VDB\u2019s, this is the port that will be used for mongo instances. For sharded VDB\u2019s, this is the starting port. Delphix will keep incrementing port by 1 and use as many as needed based on configuration selected. Oplog Size Size of oplogs Journal commit Interval Journal commit Internal in ms MongoDB Admin/Clusteradmin User Password Update password of delphix user created during dSource creation Convert each shards to replicaset Select this to create VDB as replicaset Additional Nodes Click on Add button to select aditional nodes for creating replicaset VDB or distributing Shards on different hosts Mongos Port Port to be used for mongos router instance Enable SSL/TLS Enable SSL/ TLS SSL/TLS Parameters SSL/TLS Parameters (e.g. tlsMode, tlsCAFile, tlsPEMKeyFile, sslAllowConnectionsWithoutCertificates etc) Enable Authentication Enable Authentication keyfile_path KeyAuth keyfile name (Full Path) Cluster Auth Mode None, keyFile, x509, sendKeyFile, sendX509 Source is Encrypted Does source mongo instance use encryption ? Source Encryption Method KeyFile, KMIP Local Encryption Keyfile Full path of KeyFile if used for encryption KMIP Parameters KMIP Parameter details ( e.g. kmipClientCertificateFile, kmipPort, kmipServerCAFile, kmipServerName ) Enable LDAP Enable LDAP Authentication / Authorization LDAP Parameters LDAP Parameter details ( e.g. ldapBindMethod, ldapQueryPassword, ldapServers, ldapTimeoutMS ) Enable Auditlog Enable Auditlog Parameters Auditlog Parameters Auditlog Parameter details ( e.g. auditDestination, auditFilter ) Enable SetParams Enable SetParams SetParams Parameters SetParams Parameter details ( e.g. authenticationMechanisms, opensslCipherConfig ) Client Certificate for Mongos / Mongo Session on Primary Node Client Certificate for Mongos / Mongo Session on Primary Node Client CA Certificate for Mongos / Mongo Session on Primary Node Client CA Certificate for Mongos / Mongo Session on Primary Node Following Sections are in form of Parameter Name and Value format. Add as many parameters needed by clicking on +Add button. - SSL/TLS Parameters - KMIP Parameters - LDAP Parameters - Auditlog Parameters - SetParams Parameters Note: Any parameters specified for above section need to be compatible with mongod / mongos command line parameters. Please refer Mongo Documentation for appropriate names of parameters. Please do not specify \u201c\u2013\u201d when adding any parameters. Sample Parameters are as below for SSL/TLS Parameters section tlsMode tlsCAFile tlsPEMKeyFile sslAllowConnectionsWithoutCertificates Select a Target Group for the VDB. Add a new group, if required. Select a Snapshot Policy for the VDB. Click Next. Specify any desired hook operations. Click Next. Review the Provisioning Configuration and Data Management information. Click Submit. When provisioning starts, you can review the progress of the job in the Databases panel, or in the Job History panel of the Dashboard. When provisioning is complete, the VDB will be included in the group you designated and listed in the Databases panel. If you select the VDB in the Databases panel and click the Open icon, you can view its card, which contains information about the database and its Data Management settings. Additional node is required only if you plan to use more than 1 host for VDB provisioning. This is applicable while creating VDB as replicaset OR while distributing Shards across multiple hosts. By default VDB\u2019s are always created as single node replicaset which is completely virtual. If Convert each shards to replicaset parameter is selected Delphix will convert non-sharded VDB to 3 node replicaset. Each additional instance ( 2 instances ) will incur storage as size of 1st instance. Mongo will initiate complete sync from existing member. This will impact storage as each new member will receive full copy of data from existing host. 2 Members will use twice the amount of storage. It is recommended to use single node replicaset ( if possible ) to save storage. Delphix will convert sharded VDB to 3 node replicaset for config server as well as each Shard. Each additional instance will incur storage as size of 1st instance. Mongo will initiate complete sync from existing member. This will impact storage as each new member will receive full copy of data from existing host. Storage usage will multiply based on number of shards. It is recommended to use single node replicaset ( if possible ) to save storage.","title":"Provisioning"},{"location":"Provisioning/#provisioning","text":"This topic describes the basic concepts involved with provisioning VDBs for Mongo. A dSource is a virtualized representation of a physical or logical source database. You can create a virtual database (VDB) from a dSource snapshot. A VDB is an independent, writable copy of a dSource snapshot. You can also create VDBs from other VDB. Once you have provisioned a VDB to a target environment, you can also implement snapshot and retention policies for the VDB, which will determine how frequently Delphix Engine will take a database snapshot and how long the snapshots will be retained for recovery and provisioning purposes. Snapshots accumulate over time. To view a snapshot: From the Datasets panel, click the group containing the dSource. Select dSource. Click the TimeFlow tab. The TimeFlow appears as a list of dates, each of which expands to show snapshots from that date. Bring the cursor on desired snapshot of dSource, provision icon appears, click on provision icon. Provide parameters to provision VDB, Follow the wizard and submit to provision VDB. Once you provisioned a VDB, you can also take snapshots of it. As with the dSource snapshots, you can find these when you select the VDB in the Datasets panel. You can then provision additional VDBs from these VDB snapshots.","title":"Provisioning"},{"location":"Provisioning/#provisioning-vdb","text":"This topic describes how to provision a virtual database (VDB) from a mongo dSource.","title":"Provisioning VDB"},{"location":"Provisioning/#prerequisites","text":"Install delphix engine 6.0.7.x and above Install mongo binaries on Staging host Add Staging Environment Create dSource Install mongo binaries on Target host Add Target environment","title":"Prerequisites"},{"location":"Provisioning/#create-vdb","text":"Procedure: Login to the Delphix Management GUI. Click Manage. Select Datasets. Select a dSource. Select a snapshot from which you want to provision. Click Provision VDB icon to open Provision VDB wizard. Select a target environment from the left pane. Select an Installation to use from the dropdown list of available mongo binaries on that environment. Select the Environment User. Enter VDB parameters.","title":"Create VDB"},{"location":"Provisioning/#vdb-parameters","text":"Parameter Description Mount Path Mount Path for VDB mongo instance datafiles bindIP String IP Binding - default 0.0.0.0 Target Port / Target Port Pool for Mongo Instance(s). Specify only first port for sharded mongo For non-sharded VDB\u2019s, this is the port that will be used for mongo instances. For sharded VDB\u2019s, this is the starting port. Delphix will keep incrementing port by 1 and use as many as needed based on configuration selected. Oplog Size Size of oplogs Journal commit Interval Journal commit Internal in ms MongoDB Admin/Clusteradmin User Password Update password of delphix user created during dSource creation Convert each shards to replicaset Select this to create VDB as replicaset Additional Nodes Click on Add button to select aditional nodes for creating replicaset VDB or distributing Shards on different hosts Mongos Port Port to be used for mongos router instance Enable SSL/TLS Enable SSL/ TLS SSL/TLS Parameters SSL/TLS Parameters (e.g. tlsMode, tlsCAFile, tlsPEMKeyFile, sslAllowConnectionsWithoutCertificates etc) Enable Authentication Enable Authentication keyfile_path KeyAuth keyfile name (Full Path) Cluster Auth Mode None, keyFile, x509, sendKeyFile, sendX509 Source is Encrypted Does source mongo instance use encryption ? Source Encryption Method KeyFile, KMIP Local Encryption Keyfile Full path of KeyFile if used for encryption KMIP Parameters KMIP Parameter details ( e.g. kmipClientCertificateFile, kmipPort, kmipServerCAFile, kmipServerName ) Enable LDAP Enable LDAP Authentication / Authorization LDAP Parameters LDAP Parameter details ( e.g. ldapBindMethod, ldapQueryPassword, ldapServers, ldapTimeoutMS ) Enable Auditlog Enable Auditlog Parameters Auditlog Parameters Auditlog Parameter details ( e.g. auditDestination, auditFilter ) Enable SetParams Enable SetParams SetParams Parameters SetParams Parameter details ( e.g. authenticationMechanisms, opensslCipherConfig ) Client Certificate for Mongos / Mongo Session on Primary Node Client Certificate for Mongos / Mongo Session on Primary Node Client CA Certificate for Mongos / Mongo Session on Primary Node Client CA Certificate for Mongos / Mongo Session on Primary Node Following Sections are in form of Parameter Name and Value format. Add as many parameters needed by clicking on +Add button. - SSL/TLS Parameters - KMIP Parameters - LDAP Parameters - Auditlog Parameters - SetParams Parameters Note: Any parameters specified for above section need to be compatible with mongod / mongos command line parameters. Please refer Mongo Documentation for appropriate names of parameters. Please do not specify \u201c\u2013\u201d when adding any parameters. Sample Parameters are as below for SSL/TLS Parameters section tlsMode tlsCAFile tlsPEMKeyFile sslAllowConnectionsWithoutCertificates Select a Target Group for the VDB. Add a new group, if required. Select a Snapshot Policy for the VDB. Click Next. Specify any desired hook operations. Click Next. Review the Provisioning Configuration and Data Management information. Click Submit. When provisioning starts, you can review the progress of the job in the Databases panel, or in the Job History panel of the Dashboard. When provisioning is complete, the VDB will be included in the group you designated and listed in the Databases panel. If you select the VDB in the Databases panel and click the Open icon, you can view its card, which contains information about the database and its Data Management settings. Additional node is required only if you plan to use more than 1 host for VDB provisioning. This is applicable while creating VDB as replicaset OR while distributing Shards across multiple hosts. By default VDB\u2019s are always created as single node replicaset which is completely virtual. If Convert each shards to replicaset parameter is selected Delphix will convert non-sharded VDB to 3 node replicaset. Each additional instance ( 2 instances ) will incur storage as size of 1st instance. Mongo will initiate complete sync from existing member. This will impact storage as each new member will receive full copy of data from existing host. 2 Members will use twice the amount of storage. It is recommended to use single node replicaset ( if possible ) to save storage. Delphix will convert sharded VDB to 3 node replicaset for config server as well as each Shard. Each additional instance will incur storage as size of 1st instance. Mongo will initiate complete sync from existing member. This will impact storage as each new member will receive full copy of data from existing host. Storage usage will multiply based on number of shards. It is recommended to use single node replicaset ( if possible ) to save storage.","title":"VDB Parameters"},{"location":"Troubleshooting/","text":"Plugin Logs Download the Plugin logs using the following methods: Using dvp ( from Plugin development environment ) dvp download-logs -c plugin_config.yml -e -u admin \u2013password Using GUI Help \u2013> Supports Logs \u2013> Plugin Logs \u2013> Download Instance Logs Mongo Instance logs are located at DSOURCE_MOUNT_PATH/logs ( for dSource ) Mongo Instance logs are located at VDB_MOUNT_PATH/logs ( for VDB ) Delphix logs names are in format dlpx.sNmM.port.mongod.log where N = 0,1,2,3,\u2026 [ Shard Number ] [ Always 0 for any non-sharded implementation ] M = 0,1 OR 2 [ Member Number ] port = port number of mongo instance. Note : Most of the mongo related errors are always hidden in logfile for the mongo instance. Please examine logs under DSOURCE_MOUNT_PATH/logs and VDB_MOUNT_PATH/logs for further investigation.","title":"Troubleshooting"},{"location":"Troubleshooting/#plugin-logs","text":"Download the Plugin logs using the following methods: Using dvp ( from Plugin development environment ) dvp download-logs -c plugin_config.yml -e -u admin \u2013password Using GUI Help \u2013> Supports Logs \u2013> Plugin Logs \u2013> Download","title":"Plugin Logs"},{"location":"Troubleshooting/#instance-logs","text":"Mongo Instance logs are located at DSOURCE_MOUNT_PATH/logs ( for dSource ) Mongo Instance logs are located at VDB_MOUNT_PATH/logs ( for VDB ) Delphix logs names are in format dlpx.sNmM.port.mongod.log where N = 0,1,2,3,\u2026 [ Shard Number ] [ Always 0 for any non-sharded implementation ] M = 0,1 OR 2 [ Member Number ] port = port number of mongo instance. Note : Most of the mongo related errors are always hidden in logfile for the mongo instance. Please examine logs under DSOURCE_MOUNT_PATH/logs and VDB_MOUNT_PATH/logs for further investigation.","title":"Instance Logs"},{"location":"Release_Notes/1.0.0/Release-v1.0.0/","text":"Release-v1.0.0 First Version","title":"Release-v1.0.0"},{"location":"Release_Notes/1.0.0/Release-v1.0.0/#release-v100","text":"First Version","title":"Release-v1.0.0"},{"location":"Release_Notes/1.0.1/Release-v1.0.1/","text":"Release-v1.0.1 To deploy and configure Mongo plugin, refer to Overview . Bug Fixes Sharded dSource creation workflow fixed.","title":"Release-v1.0.1"},{"location":"Release_Notes/1.0.1/Release-v1.0.1/#release-v101","text":"To deploy and configure Mongo plugin, refer to Overview .","title":"Release-v1.0.1"},{"location":"Release_Notes/1.0.1/Release-v1.0.1/#bug-fixes","text":"Sharded dSource creation workflow fixed.","title":"Bug Fixes"},{"location":"Release_Notes/1.0.2/Release-v1.0.2/","text":"Release-v1.0.2 To deploy and configure Mongo plugin, refer to Overview . New & Improved * DXE-950 Allow user to specify location of mongodump and mongorestore. DXE-992 Added support to accept .tar extension of Mongo OPS Manager Backup file in addition to .tar.gz . DXE-982 Mongo: Certified support for MongoDB 5.0.9. Bug Fixes DXE-985 Incorrect date format in backup metadata file produces linking error. DXE-964 Mongo : Enable Authentication with User Auth Mode as ldap breaks dSource/VDB creation Known Issues Plugin does not recognize any environment variables in hooks. dSource cannot be upgraded via GUI. Only CLI interface supported. Support Matrix Platform \\ Mongo Plugin Version v1.0.2 Delphix Engine 6.0.15.0 Staging / Target Host RHEL/CentOS 7.x. Future releases may add support for additional OS platforms and Delphix Engine versions.","title":"Release-v1.0.2"},{"location":"Release_Notes/1.0.2/Release-v1.0.2/#release-v102","text":"To deploy and configure Mongo plugin, refer to Overview .","title":"Release-v1.0.2"},{"location":"Release_Notes/1.0.2/Release-v1.0.2/#new-improved","text":"* DXE-950 Allow user to specify location of mongodump and mongorestore. DXE-992 Added support to accept .tar extension of Mongo OPS Manager Backup file in addition to .tar.gz . DXE-982 Mongo: Certified support for MongoDB 5.0.9.","title":"New &amp; Improved"},{"location":"Release_Notes/1.0.2/Release-v1.0.2/#bug-fixes","text":"DXE-985 Incorrect date format in backup metadata file produces linking error. DXE-964 Mongo : Enable Authentication with User Auth Mode as ldap breaks dSource/VDB creation","title":"Bug Fixes"},{"location":"Release_Notes/1.0.2/Release-v1.0.2/#known-issues","text":"Plugin does not recognize any environment variables in hooks. dSource cannot be upgraded via GUI. Only CLI interface supported.","title":"Known Issues"},{"location":"Release_Notes/1.0.2/Release-v1.0.2/#support-matrix","text":"Platform \\ Mongo Plugin Version v1.0.2 Delphix Engine 6.0.15.0 Staging / Target Host RHEL/CentOS 7.x. Future releases may add support for additional OS platforms and Delphix Engine versions.","title":"Support Matrix"},{"location":"Release_Notes/1.1.0/Release-v1.1.0/","text":"Release-v1.1.0 To deploy and configure Mongo plugin, refer to Overview . New & Improved DXE-950 MongoDB: Allow user to specify location of mongodump and mongorestore. DXE-992 MongoDB: Added support to accept .tar extension of Mongo OPS Manager Backup file in addition to .tar.gz DXE-986 MongoDB: Remove extra prompt Source Sharded if dSource_Type is already selected as shardedsource DXE-987 MongoDB: Remove Convert each shards to replicaset\u201d for dSource linking. Its applicable only for VDB. DXE-982 MongoDB: Certified support for MongoDB 5.0.9. DXE-936 MongoDB: Added SDD supported. DXE-995 MongoDB: Mask sensitive information from plugin logs. Bug Fixes DXE-985 MongoDB: Incorrect date format in backup metadata file produces linking error DXE-964 MongoDB: Enable Authentication and \u201cEnable Authentication\u201d with \u201cUser Auth Mode\u201d as \u201cldap\u201d breaks dSource/VDB creation Known Issues Plugin does not recognize any environment variables in hooks. dSource cannot be upgraded via GUI. Only CLI interface supported. Support Matrix Platform \\ Mongo Plugin Version v1.1.0 Delphix Engine 6.0.15.0 Staging / Target Host RHEL/CentOS 7.x. Future releases may add support for additional OS platforms and Delphix Engine versions.","title":"Release-v1.1.0"},{"location":"Release_Notes/1.1.0/Release-v1.1.0/#release-v110","text":"To deploy and configure Mongo plugin, refer to Overview .","title":"Release-v1.1.0"},{"location":"Release_Notes/1.1.0/Release-v1.1.0/#new-improved","text":"DXE-950 MongoDB: Allow user to specify location of mongodump and mongorestore. DXE-992 MongoDB: Added support to accept .tar extension of Mongo OPS Manager Backup file in addition to .tar.gz DXE-986 MongoDB: Remove extra prompt Source Sharded if dSource_Type is already selected as shardedsource DXE-987 MongoDB: Remove Convert each shards to replicaset\u201d for dSource linking. Its applicable only for VDB. DXE-982 MongoDB: Certified support for MongoDB 5.0.9. DXE-936 MongoDB: Added SDD supported. DXE-995 MongoDB: Mask sensitive information from plugin logs.","title":"New &amp; Improved"},{"location":"Release_Notes/1.1.0/Release-v1.1.0/#bug-fixes","text":"DXE-985 MongoDB: Incorrect date format in backup metadata file produces linking error DXE-964 MongoDB: Enable Authentication and \u201cEnable Authentication\u201d with \u201cUser Auth Mode\u201d as \u201cldap\u201d breaks dSource/VDB creation","title":"Bug Fixes"},{"location":"Release_Notes/1.1.0/Release-v1.1.0/#known-issues","text":"Plugin does not recognize any environment variables in hooks. dSource cannot be upgraded via GUI. Only CLI interface supported.","title":"Known Issues"},{"location":"Release_Notes/1.1.0/Release-v1.1.0/#support-matrix","text":"Platform \\ Mongo Plugin Version v1.1.0 Delphix Engine 6.0.15.0 Staging / Target Host RHEL/CentOS 7.x. Future releases may add support for additional OS platforms and Delphix Engine versions.","title":"Support Matrix"},{"location":"Requirements/NetworkPorts/","text":"Network Port Requirements The following diagram describes the port allocations for Mongo environments. It illustrates the ports that we recommend to be open from Delphix to remote services, to the Delphix Engine, and to the Target Environments.","title":"Network Port Requirements"},{"location":"Requirements/NetworkPorts/#network-port-requirements","text":"The following diagram describes the port allocations for Mongo environments. It illustrates the ports that we recommend to be open from Delphix to remote services, to the Delphix Engine, and to the Target Environments.","title":"Network Port Requirements"},{"location":"Requirements/Source/","text":"Source Requirements Database instance Access to Source SSL Certificate (if applicable) Access to KMIP Credentials (if applicable) Access to Encryption KeyFile (if applicable) Backup files from Mongo Ops Manager / Offline mongodump presented to Staging host. Database user with following privileges ( for extendedcluster dSource type ) - clusterAdmin - changeOwnPasswordRole use admin db.createRole ( { role: \"changeOwnPasswordRole\" , privileges: [ { resource: { db: \"\" , collection: \"\" } , actions: [ \"changeOwnPassword\" ] } ] , roles: [] } ) db.createUser ({ user: \"clusteradmin\" ,pwd: \"xxxxxx\" , roles: [ \"clusterAdmin\" , \"changeOwnPasswordRole\" ]}) Database user with following privileges ( for onlinemongodump dSource type ) use admin db.createUser({user: \"clusteradmin\",pwd: \"xxxxxx\", roles: [\"clusterAdmin\",\"backup\"]})","title":"Source Requirements"},{"location":"Requirements/Source/#source-requirements","text":"","title":"Source Requirements"},{"location":"Requirements/Source/#database-instance","text":"Access to Source SSL Certificate (if applicable) Access to KMIP Credentials (if applicable) Access to Encryption KeyFile (if applicable) Backup files from Mongo Ops Manager / Offline mongodump presented to Staging host. Database user with following privileges ( for extendedcluster dSource type ) - clusterAdmin - changeOwnPasswordRole use admin db.createRole ( { role: \"changeOwnPasswordRole\" , privileges: [ { resource: { db: \"\" , collection: \"\" } , actions: [ \"changeOwnPassword\" ] } ] , roles: [] } ) db.createUser ({ user: \"clusteradmin\" ,pwd: \"xxxxxx\" , roles: [ \"clusterAdmin\" , \"changeOwnPasswordRole\" ]}) Database user with following privileges ( for onlinemongodump dSource type ) use admin db.createUser({user: \"clusteradmin\",pwd: \"xxxxxx\", roles: [\"clusterAdmin\",\"backup\"]})","title":"Database instance"},{"location":"Requirements/Staging/","text":"Staging Requirements O/S User / Privileges Regular o/s user with primary group as mongod. Execute access on mongo/mongod binaries mongo and mongod binaries to be in same folder [ if required create softlink ] Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. Access to source instance backup file(s) from Staging host logged as delphix user (applicable for mongo ops mgr / offline mongodump use case). sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount, /bin/umount","title":"Staging Requirements"},{"location":"Requirements/Staging/#staging-requirements","text":"","title":"Staging Requirements"},{"location":"Requirements/Staging/#os-user-privileges","text":"Regular o/s user with primary group as mongod. Execute access on mongo/mongod binaries mongo and mongod binaries to be in same folder [ if required create softlink ] Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. Access to source instance backup file(s) from Staging host logged as delphix user (applicable for mongo ops mgr / offline mongodump use case). sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount, /bin/umount","title":"O/S User / Privileges"},{"location":"Requirements/SupportMatrix/","text":"Support Matrix Database / OS Support Matrix Supported Mongo Version mongoDB 4.2.x mongoDB 4.4.x mongoDB 5.0.x RHEL 6.x RHEL 7.x CentOS 6.x CentOS 7.x Windows Architecture Options Matrix Architecture Non-Sharded Source Non-Sharded Target Sharded Source Sharded Target Seed N/A N/A extendedcluster onlinemongodump offlinemongodump shardedsource nonshardedsource stagingpush Engine Compatibility Matrix Engine Version Mongopy 1.0.0 Mongopy 1.0.1 Mongopy 1.0.2 Mongopy 1.1.0 6.0.7.x - 6.0.11.x 6.0.12.x - 6.0.15.x Mongo Version compatability across delphix environments Mongo binaries in all environments ( staging and target ) should be of same version for all dSource Type. Mongo binaries in all environments ( source, staging and target ) should be of same version for dSource Type: extendedcluster, nonshardedmongo, shardedmongo and stagingpush. Mongo binaries can be of same or higher version than source in staging environment for offlinemongodump, onlinemongodump adhering to MongoDB vendor support matrix. Mongo binaries in staging and target should be of same or compatible version for dSource types offlinemongodump and onlinemongodump.","title":"Support Matrix"},{"location":"Requirements/SupportMatrix/#support-matrix","text":"","title":"Support Matrix"},{"location":"Requirements/SupportMatrix/#database-os-support-matrix","text":"Supported Mongo Version mongoDB 4.2.x mongoDB 4.4.x mongoDB 5.0.x RHEL 6.x RHEL 7.x CentOS 6.x CentOS 7.x Windows","title":"Database / OS Support Matrix"},{"location":"Requirements/SupportMatrix/#architecture-options-matrix","text":"Architecture Non-Sharded Source Non-Sharded Target Sharded Source Sharded Target Seed N/A N/A extendedcluster onlinemongodump offlinemongodump shardedsource nonshardedsource stagingpush","title":"Architecture Options Matrix"},{"location":"Requirements/SupportMatrix/#engine-compatibility-matrix","text":"Engine Version Mongopy 1.0.0 Mongopy 1.0.1 Mongopy 1.0.2 Mongopy 1.1.0 6.0.7.x - 6.0.11.x 6.0.12.x - 6.0.15.x","title":"Engine Compatibility Matrix"},{"location":"Requirements/SupportMatrix/#mongo-version-compatability-across-delphix-environments","text":"Mongo binaries in all environments ( staging and target ) should be of same version for all dSource Type. Mongo binaries in all environments ( source, staging and target ) should be of same version for dSource Type: extendedcluster, nonshardedmongo, shardedmongo and stagingpush. Mongo binaries can be of same or higher version than source in staging environment for offlinemongodump, onlinemongodump adhering to MongoDB vendor support matrix. Mongo binaries in staging and target should be of same or compatible version for dSource types offlinemongodump and onlinemongodump.","title":"Mongo Version compatability across delphix environments"},{"location":"Requirements/Target/","text":"Target Requirements O/S User / Privileges Regular o/s user with primary group as mongod. Execute access on mongo/mongod binaries mongo and mongod binaries to be in same folder [ if required create softlink ] Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount","title":"Target Requirements"},{"location":"Requirements/Target/#target-requirements","text":"","title":"Target Requirements"},{"location":"Requirements/Target/#os-user-privileges","text":"Regular o/s user with primary group as mongod. Execute access on mongo/mongod binaries mongo and mongod binaries to be in same folder [ if required create softlink ] Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount","title":"O/S User / Privileges"},{"location":"Upgrades/UpgradeDsource/","text":"Upgrade dSource Upgrades Periodically Production and Lower environments are upgraded for various reasons like To be in compliance To mitigate bugs Security concerns To meet compatibility with other software. Upgrading the Source database to a higher version will impact dSource snapsyncs if the version upgraded is not compatible with version of staging database. Delphix can handle the upgrade of the databases by updating the configuration in dSource. Upgrade dSource to a higher version. (Until 1.0.2 MongoDB Plugin) Step 1: Install the same version of Mongo software on the staging host.[ same version as source ]. Step 2: Update repoconfig file. Please refer Discovery Section. Step 3: Refresh Staging Environment in Delphix. Step 4: Verify new Mongo home is discovered in the environment with entry PY EDSI MongoDB (vMONGO_VERSION) . Step 5: Disable dSource [ Manage Datasets \u2192 Select dSource \u2192 disable ]. Step 6: Log in to Delphix engine via CLI (ssh) interface and execute the following commands. cd sourceconfig select <dSource_Name> update set repository = <New Mongo Home discovered in Step 4 > commit ; Step 7: Enable dSource [ Manage Datasets \u2192 Select dSource \u2192 enable ] Step 8: Take a new snapshot to validate that snapsync works as expected. Note : You may need to resync dSource depending on mongo version compatability.","title":"Upgrade dSource"},{"location":"Upgrades/UpgradeDsource/#upgrade-dsource","text":"","title":"Upgrade dSource"},{"location":"Upgrades/UpgradeDsource/#upgrades","text":"Periodically Production and Lower environments are upgraded for various reasons like To be in compliance To mitigate bugs Security concerns To meet compatibility with other software. Upgrading the Source database to a higher version will impact dSource snapsyncs if the version upgraded is not compatible with version of staging database. Delphix can handle the upgrade of the databases by updating the configuration in dSource.","title":"Upgrades"},{"location":"Upgrades/UpgradeDsource/#upgrade-dsource-to-a-higher-version-until-102-mongodb-plugin","text":"Step 1: Install the same version of Mongo software on the staging host.[ same version as source ]. Step 2: Update repoconfig file. Please refer Discovery Section. Step 3: Refresh Staging Environment in Delphix. Step 4: Verify new Mongo home is discovered in the environment with entry PY EDSI MongoDB (vMONGO_VERSION) . Step 5: Disable dSource [ Manage Datasets \u2192 Select dSource \u2192 disable ]. Step 6: Log in to Delphix engine via CLI (ssh) interface and execute the following commands. cd sourceconfig select <dSource_Name> update set repository = <New Mongo Home discovered in Step 4 > commit ; Step 7: Enable dSource [ Manage Datasets \u2192 Select dSource \u2192 enable ] Step 8: Take a new snapshot to validate that snapsync works as expected. Note : You may need to resync dSource depending on mongo version compatability.","title":"Upgrade dSource to a higher version. (Until 1.0.2 MongoDB Plugin)"},{"location":"Upgrades/UpgradePlugin/","text":"Upgrade Plugin Periodic upgrade of plugin is required to Avail new features Bugfixes Stay in compliance Stay Compatible with upgraded delphix data platform. Plugin upgrade need to be done in a order from current version to desired version sequentially. Below is the sample path from lowest to highest version. Depending on current version, follow the path to next version in sequence. 1.0.0 -> 1.0.1 -> 1.0.2 -> 1.1.0 Upgrade need to be done in sequence without skipping intermediate version. It can be done one after another in same session. Note : There is no downtime required for dSources. Things to consider during plugin upgrade: After uploading 1.1.0 MongoDB Plugin, specify the MongoDB database tools path in $MONGO_REPO_CFGFILE. Please refer Discovery section. Upload plugin - refresh all environments and ensure plugin discovery is completed successfully. Enable all datasets and take a new snapshot.","title":"Upgrade Plugin"},{"location":"Upgrades/UpgradePlugin/#upgrade-plugin","text":"Periodic upgrade of plugin is required to Avail new features Bugfixes Stay in compliance Stay Compatible with upgraded delphix data platform. Plugin upgrade need to be done in a order from current version to desired version sequentially. Below is the sample path from lowest to highest version. Depending on current version, follow the path to next version in sequence. 1.0.0 -> 1.0.1 -> 1.0.2 -> 1.1.0 Upgrade need to be done in sequence without skipping intermediate version. It can be done one after another in same session. Note : There is no downtime required for dSources. Things to consider during plugin upgrade: After uploading 1.1.0 MongoDB Plugin, specify the MongoDB database tools path in $MONGO_REPO_CFGFILE. Please refer Discovery section. Upload plugin - refresh all environments and ensure plugin discovery is completed successfully. Enable all datasets and take a new snapshot.","title":"Upgrade Plugin"},{"location":"Upgrades/UpgradeVDB/","text":"Upgrade VDB Upgrades Periodically Lower environments are upgraded for various reasons like To be in compliance To mitigate bugs Security concerns To meet compatibility with other software. Upgrade VDB to a higher version. (Until 1.0.2 MongoDB Plugin) Step 1: Install the same version of Mongo software on the Target host.[ same version as Source/Target ]. Step 2: Update repoconfig file. Please refer Discovery Section. Step 3: Refresh Target Environment in Delphix. Step 4: Verify new Mongo home is discovered in the environment with entry PY EDSI MongoDB (vMONGO_VERSION) . Step 5: Disable VDB [ Manage Datasets \u2192 Select VDB \u2192 disable ] Step 6: Update VDB configuration using Migrate option in Delphix GUI Manage Datasets \u2192 Select VDB \u2192 Migrate Select Correct Environment Select Correct Mongo Home under Installation Click on Migrate Step 7: Enable VDB [ Manage Datasets \u2192 Select VDB \u2192 enable ] Step 8: Take a new snapshot to validate VDB snapshot works as expected. Note : You may need to refresh VDB depending on mongo version compatability.","title":"Upgrade VDB"},{"location":"Upgrades/UpgradeVDB/#upgrade-vdb","text":"","title":"Upgrade VDB"},{"location":"Upgrades/UpgradeVDB/#upgrades","text":"Periodically Lower environments are upgraded for various reasons like To be in compliance To mitigate bugs Security concerns To meet compatibility with other software.","title":"Upgrades"},{"location":"Upgrades/UpgradeVDB/#upgrade-vdb-to-a-higher-version-until-102-mongodb-plugin","text":"Step 1: Install the same version of Mongo software on the Target host.[ same version as Source/Target ]. Step 2: Update repoconfig file. Please refer Discovery Section. Step 3: Refresh Target Environment in Delphix. Step 4: Verify new Mongo home is discovered in the environment with entry PY EDSI MongoDB (vMONGO_VERSION) . Step 5: Disable VDB [ Manage Datasets \u2192 Select VDB \u2192 disable ] Step 6: Update VDB configuration using Migrate option in Delphix GUI Manage Datasets \u2192 Select VDB \u2192 Migrate Select Correct Environment Select Correct Mongo Home under Installation Click on Migrate Step 7: Enable VDB [ Manage Datasets \u2192 Select VDB \u2192 enable ] Step 8: Take a new snapshot to validate VDB snapshot works as expected. Note : You may need to refresh VDB depending on mongo version compatability.","title":"Upgrade VDB to a higher version. (Until 1.0.2 MongoDB Plugin)"}]}