{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview \u00b6 MongoDB plugin helps to virtualize mongoDB data source leveraging the following built-in mongoDB technologies: Supported Backup Mechanisms: Mongodump : Export source data and import into Staging mongo instance (dSource). Useful for offline/online backups of small databases (onprem, Saas, MongoAtlas) Replication : Add replicaset member to existing cluster. Mongo Ops Manager : Use existing backups downloaded as compressed file(s) from Mongo OPS Manager. Mongo plugin allows you to use Mongo Ops Manager / Mongodump Backups as the source of dataset in Delphix. It also supports to setup replication cluster node to collect instant data. Mongo Plugin supports following use cases : MongoDB cluster/single instance offline backups using mongodump mechanism (Zero Touch Production). MongoDB cluster/single instance online backups using mongodump mechanism. MongoDB extended cluster replicaset by adding replicaset member to existing source cluster using delphix filesystem. MongoDB sharded Cluster using Mongo OPS Manager backups (Zero Touch Production). MongoDB non-sharded Cluster using Mongo OPS Manager backups (Zero Touch Production). MongoDB seed database Architecture \u00b6 Support Matrix \u00b6 Mongo Instance / OS Support Matrix \u00b6 Mongo Versions RHEL 6.4 RHEL 7.4 RHEL 7.9 Windows x.x mongoDB 4.2 mongoDB 4.4 - mongoDB 4.2(sharded) mongoDB 4.4(sharded) - Engine Compatibility Matrix \u00b6 Engine Versions Mongo 4.4.2 Mongopy 0.0.9 5.2.x.x 5.3.5.x 6.0.2.x >6.0.3.x - 6.0.10.0 Prerequisites \u00b6 Source Requirements \u00b6 Access to Source SSL Certificate (if applicable) Access to KMIP Credentials (if applicable) Access to Encryption KeyFile (if applicable) Backup files from Mongo Ops Manager / Offline mongodump presented to Staging host. Database user with following privileges ( for extendedcluster dSource type ) - clusterAdmin - changeOwnPasswordRole use admin db.createRole ( { role: \"changeOwnPasswordRole\" , privileges: [ { resource: { db: \"\" , collection: \"\" } , actions: [ \"changeOwnPassword\" ] } ] , roles: [] } ) db.createUser ({ user: \"clusteradmin\" ,pwd: \"xxxxxx\" , roles: [ \"clusterAdmin\" , \"changeOwnPasswordRole\" ]}) Database user with following privileges ( for onlinemongodump dSource type ) use admin db.createUser({user: \"clusteradmin\",pwd: \"xxxxxx\", roles: [\"clusterAdmin\",\"userAdminAnyDatabase\"]}) Staging Requirements \u00b6 O/S user with following privileges 1. Regular o/s user with primary group as mongod. 2. Execute access on mongo/mongod binaries 3. mongo and mongod binaries to be in same folder [ if required create softlink ] 4. Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] 5. Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. 6. Access to source instance backup file(s) from Staging host logged as delphix user (applicable for mongo ops mgr / offline mongodump use case). 7. sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount, /bin/umount Network Port requirements \u00b6 Target Requirements \u00b6 O/S user with following privileges 1. Regular o/s user with primary group as mongod. 2. Execute access on mongo/mongod binaries 3. mongo and mongod binaries to be in same folder [ if required create softlink ] 4. Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] 5. Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. 6. sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount Network Port requirements \u00b6 Limitations \u00b6 V2P Not supported Password Vault not supported PITR","title":"Overview"},{"location":"index.html#overview","text":"MongoDB plugin helps to virtualize mongoDB data source leveraging the following built-in mongoDB technologies: Supported Backup Mechanisms: Mongodump : Export source data and import into Staging mongo instance (dSource). Useful for offline/online backups of small databases (onprem, Saas, MongoAtlas) Replication : Add replicaset member to existing cluster. Mongo Ops Manager : Use existing backups downloaded as compressed file(s) from Mongo OPS Manager. Mongo plugin allows you to use Mongo Ops Manager / Mongodump Backups as the source of dataset in Delphix. It also supports to setup replication cluster node to collect instant data. Mongo Plugin supports following use cases : MongoDB cluster/single instance offline backups using mongodump mechanism (Zero Touch Production). MongoDB cluster/single instance online backups using mongodump mechanism. MongoDB extended cluster replicaset by adding replicaset member to existing source cluster using delphix filesystem. MongoDB sharded Cluster using Mongo OPS Manager backups (Zero Touch Production). MongoDB non-sharded Cluster using Mongo OPS Manager backups (Zero Touch Production). MongoDB seed database","title":"Overview"},{"location":"index.html#architecture","text":"","title":"Architecture"},{"location":"index.html#support-matrix","text":"","title":"Support Matrix"},{"location":"index.html#mongo-instance-os-support-matrix","text":"Mongo Versions RHEL 6.4 RHEL 7.4 RHEL 7.9 Windows x.x mongoDB 4.2 mongoDB 4.4 - mongoDB 4.2(sharded) mongoDB 4.4(sharded) -","title":"Mongo Instance / OS Support Matrix"},{"location":"index.html#engine-compatibility-matrix","text":"Engine Versions Mongo 4.4.2 Mongopy 0.0.9 5.2.x.x 5.3.5.x 6.0.2.x >6.0.3.x - 6.0.10.0","title":"Engine Compatibility Matrix"},{"location":"index.html#prerequisites","text":"","title":"Prerequisites"},{"location":"index.html#source-requirements","text":"Access to Source SSL Certificate (if applicable) Access to KMIP Credentials (if applicable) Access to Encryption KeyFile (if applicable) Backup files from Mongo Ops Manager / Offline mongodump presented to Staging host. Database user with following privileges ( for extendedcluster dSource type ) - clusterAdmin - changeOwnPasswordRole use admin db.createRole ( { role: \"changeOwnPasswordRole\" , privileges: [ { resource: { db: \"\" , collection: \"\" } , actions: [ \"changeOwnPassword\" ] } ] , roles: [] } ) db.createUser ({ user: \"clusteradmin\" ,pwd: \"xxxxxx\" , roles: [ \"clusterAdmin\" , \"changeOwnPasswordRole\" ]}) Database user with following privileges ( for onlinemongodump dSource type ) use admin db.createUser({user: \"clusteradmin\",pwd: \"xxxxxx\", roles: [\"clusterAdmin\",\"userAdminAnyDatabase\"]})","title":"Source Requirements"},{"location":"index.html#staging-requirements","text":"O/S user with following privileges 1. Regular o/s user with primary group as mongod. 2. Execute access on mongo/mongod binaries 3. mongo and mongod binaries to be in same folder [ if required create softlink ] 4. Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] 5. Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. 6. Access to source instance backup file(s) from Staging host logged as delphix user (applicable for mongo ops mgr / offline mongodump use case). 7. sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount, /bin/umount","title":"Staging Requirements"},{"location":"index.html#network-port-requirements","text":"","title":"Network Port requirements"},{"location":"index.html#target-requirements","text":"O/S user with following privileges 1. Regular o/s user with primary group as mongod. 2. Execute access on mongo/mongod binaries 3. mongo and mongod binaries to be in same folder [ if required create softlink ] 4. Empty folder on host to hold delphix toolkit [ approximate 2GB free space ] 5. Empty folder on host to mount nfs filesystem. This is just an empty folder with no space requirements and act as base folder for nfs mounts. 6. sudo privileges for mount, umount. See sample below assuming delphix_os is used as delphix user. Defaults:delphixos !requiretty delphixos ALL = NOPASSWD: \\ /bin/mount","title":"Target Requirements"},{"location":"index.html#network-port-requirements_1","text":"","title":"Network Port requirements"},{"location":"index.html#limitations","text":"V2P Not supported Password Vault not supported PITR","title":"Limitations"},{"location":"Discovery.html","text":"Discovery \u00b6 Environment discovery is a process that enables the mongoDB Plugin to determine mongo installation details on a host. Whenever there is any changes (installing a new binary home) to an already set up environment in the Delphix application, environment refresh need to be performed. Prerequisites \u00b6 Install delphix engine 5.3.x and above Install mongo binaries on staging and target servers Installation of the mongoDB Plugin is required before the discovery Environment variable $MONGO_PATH should be set on staging/target host, which contains binary path of mongo Mongo Binaries Discovery \u00b6 Mongo can be installed in different ways and so the path can vary in different environments. To discover correct binaries, follow steps as below Steps: Login to the Staging Host as delphix os user. Create a file name \".setDelphixMongoEnv\" in home directory of delphix user. touch $HOME/.setDelphixMongoEnv Define variable pointing to config file for manual discovery of mongodb instances. Example as below. echo \"MONGO_REPO_CFGFILE=/home/delphix/.mongorepos.txt\" > $HOME/.setDelphixMongoEnv Define full path to mongod binary in file represented by $MONGO_REPO_CFGFILE. Example as below. source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb366/bin/mongod\" > $MONGO_REPO_CFGFILE If there are multiple version binaries, specify each on seperate line as below source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb366/bin/mongod\" > $MONGO_REPO_CFGFILE echo \"MONGO_PATH=/u01/mongodb404/bin/mongod\" >> $MONGO_REPO_CFGFILE Login to the Delphix Management application. Click Manage. Select Environments. In the Environments panel, click the name of the environment you want to refresh. Select the Refresh icon. In the Refresh confirmation dialog select Refresh. Sourceconfig \u00b6 Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource.","title":"Discovery"},{"location":"Discovery.html#discovery","text":"Environment discovery is a process that enables the mongoDB Plugin to determine mongo installation details on a host. Whenever there is any changes (installing a new binary home) to an already set up environment in the Delphix application, environment refresh need to be performed.","title":"Discovery"},{"location":"Discovery.html#prerequisites","text":"Install delphix engine 5.3.x and above Install mongo binaries on staging and target servers Installation of the mongoDB Plugin is required before the discovery Environment variable $MONGO_PATH should be set on staging/target host, which contains binary path of mongo","title":"Prerequisites"},{"location":"Discovery.html#mongo-binaries-discovery","text":"Mongo can be installed in different ways and so the path can vary in different environments. To discover correct binaries, follow steps as below Steps: Login to the Staging Host as delphix os user. Create a file name \".setDelphixMongoEnv\" in home directory of delphix user. touch $HOME/.setDelphixMongoEnv Define variable pointing to config file for manual discovery of mongodb instances. Example as below. echo \"MONGO_REPO_CFGFILE=/home/delphix/.mongorepos.txt\" > $HOME/.setDelphixMongoEnv Define full path to mongod binary in file represented by $MONGO_REPO_CFGFILE. Example as below. source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb366/bin/mongod\" > $MONGO_REPO_CFGFILE If there are multiple version binaries, specify each on seperate line as below source $HOME/.setDelphixMongoEnv echo \"MONGO_PATH=/u01/mongodb366/bin/mongod\" > $MONGO_REPO_CFGFILE echo \"MONGO_PATH=/u01/mongodb404/bin/mongod\" >> $MONGO_REPO_CFGFILE Login to the Delphix Management application. Click Manage. Select Environments. In the Environments panel, click the name of the environment you want to refresh. Select the Refresh icon. In the Refresh confirmation dialog select Refresh.","title":"Mongo Binaries Discovery"},{"location":"Discovery.html#sourceconfig","text":"Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource.","title":"Sourceconfig"},{"location":"Installation.html","text":"Installation \u00b6 Delphix plugin for mongoDB can be installed via GUI or using command prompt (developer environment) Prerequisites \u00b6 Install delphix engine 5.3.x and above Install mongo binaries on staging and target servers Install MongoDB Plugin \u00b6 Following 2 methods can be used for upload mongo plugin to delphix appliance. Using GUI \u00b6 Click on Manage and then Plugins Click on + icon Click on Upload or Upgrade a plugin Select the build(artifacts.json) Click on close button See the plugin version in Plugins section Using dvp (on command prompt) \u00b6 dvp upload -e <Delphix_Engine_Name> -u <username> --password <password> Delphix Engine's documentation on installing plugins: PluginManagement","title":"Installation"},{"location":"Installation.html#installation","text":"Delphix plugin for mongoDB can be installed via GUI or using command prompt (developer environment)","title":"Installation"},{"location":"Installation.html#prerequisites","text":"Install delphix engine 5.3.x and above Install mongo binaries on staging and target servers","title":"Prerequisites"},{"location":"Installation.html#install-mongodb-plugin","text":"Following 2 methods can be used for upload mongo plugin to delphix appliance.","title":"Install MongoDB Plugin"},{"location":"Installation.html#using-gui","text":"Click on Manage and then Plugins Click on + icon Click on Upload or Upgrade a plugin Select the build(artifacts.json) Click on close button See the plugin version in Plugins section","title":"Using GUI"},{"location":"Installation.html#using-dvp-on-command-prompt","text":"dvp upload -e <Delphix_Engine_Name> -u <username> --password <password> Delphix Engine's documentation on installing plugins: PluginManagement","title":"Using dvp (on command prompt)"},{"location":"Linking.html","text":"Linking \u00b6 Linking a data source will create a dSource object on the engine and allow Delphix to ingest data from this source. The dSource is an object that the Delphix Virtualization Engine uses to create and update virtual copies of your database. Prerequisites \u00b6 Install delphix engine 5.3.x and above Install mongo binaries on staging host Execute Discovery on staging host Create sourceConfig on staging host Create dSource \u00b6 Steps: Login to Delphix Management application. Click Manage > Datasets Select Add dSource. In the Add dSource wizard, select the mongo source config you just created on the staging host. Select the dSource type from the drop-down available on dSource wizard. dSource is delphix representation of source database copy. It can be created in different ways Seed Mongodump (offline) Mongodump (online) Online replicaset Mongo OPS Manager backups (sharded cluster) Mongo OPS Manager backups (non-sharded cluster) Enter the mongo-specific parameters for your dSource configuration. dSource Parameters \u00b6 Parameter Description dSource Type dSource Type Type of dSource seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Source MongoDB Host Connct String Source Instance Connect String onlinemongodump MongoDB Source Database User Source database user onlinemongodump MongoDB Password Source database password onlinemongodump Enable logsync Capture oplogs onlinemongodump Staging MongoDB Host Staging host for creating dSource seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Staging Port Staging Port for Mongo Instance seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Mongos Port Port to be used for mongos shardedsource bindIP String default 0.0.0.0 seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Oplog Size Size of oplogs seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Journal commit Interval Internal in ms seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Storage Engine Storage Engine - wiredTiger seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Mount Path Mount Path for instance datafiles seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Backup Metadata File Name Backup datetime - Content : MMDDYYYY_HH24MISS seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Mongo Admin User Mongo Admin User on Staging Host seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump MongoDB Password Mongo Admin User Password on Staging Host seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Source Sharded Cluster Is Source Sharded Cluster shardedsource Config Server Backup File (sharded mongo) replicaset backup file (nonsharded mongo) Backup directory for Mongodump Config Server Backup File Name replicaset backup file (nonsharded mongo) Backup directory for Mongodump shardedsource offlinemongodump, onlinemongodump offlinemongodump, onlinemongodump Shard Backup Files Shard Backup File Full Path. Add File for each Shard shardedsource Enable SSL/TLS Enable SSL/ TLS seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump SSL/TLS Parameters SSL/TLS Parameters (tlsMode, tlsCAFile, tlsPEMKeyFile, sslAllowConnectionsWithoutCertificates) seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Enable Authentication Enable Authentication seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump User Auth Mode \"None\",\"SCRAM\",\"x509\",\"ldap\" seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump keyfile_path KeyAuth keyfile name (Full Path) seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Create Sourceconfig \u00b6 Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource. Login to the Delphix Management application. Click Manage. Select Environments. Select the repository Click on + icon ( Shown in next image ) Add required details in Add database section. identity field : Proivide unique name for staging database discoveryType : Keep it as manual Click Add button Create dSource \u00b6 dSource is delphix representation of source database copy. It can be of several different types. Create sourceConfig under repository of staging environment Click on Add dSource link. Select appropriate dSource Type Enter mongo-specific parameters for your dSource configuration. Proceed with wizard and submit to create dSource. Seed \u00b6 This type of dSource is generally used for pure development purpose. There is no source instance associated with it. It creates a empty instance which is managed by delphix and helps to create virtual mongo instance to avail benefits of all delphix features. Mongodump (offline) \u00b6 This type of dsource is created using mongodump backup file of source mongo instance. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource. Mongodump (online) \u00b6 This type of dsource is created using mongodump backup file of source mongo instance. It helps to create dsource using online backup. It can run in regular mode or logsync mode. logsync mode helps to capture oplogs for incremental snapsyncs and reduce backup time and size. Periodic backups can be loaded to create timeline of dsource. Online replicaset \u00b6 This type of dsource is created by adding secondary member to existing source cluster. This member does not participate in voting and never becomes primary nor serves any read operations. Its the fastest way of capturing incremental and multiple snapshots can be taken to get desired timeline. Mongo OPS Manager backups (sharded cluster) \u00b6 This type of dsource is created using backup file of source mongo instance created by mongo ops manager. It helps to create dsource of sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource. Mongo OPS Manager backups (non-sharded cluster) \u00b6 This type of dsource is created using backup file of source mongo instance created by mongo ops manager. It helps to create dsource of non-sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Linking"},{"location":"Linking.html#linking","text":"Linking a data source will create a dSource object on the engine and allow Delphix to ingest data from this source. The dSource is an object that the Delphix Virtualization Engine uses to create and update virtual copies of your database.","title":"Linking"},{"location":"Linking.html#prerequisites","text":"Install delphix engine 5.3.x and above Install mongo binaries on staging host Execute Discovery on staging host Create sourceConfig on staging host","title":"Prerequisites"},{"location":"Linking.html#create-dsource","text":"Steps: Login to Delphix Management application. Click Manage > Datasets Select Add dSource. In the Add dSource wizard, select the mongo source config you just created on the staging host. Select the dSource type from the drop-down available on dSource wizard. dSource is delphix representation of source database copy. It can be created in different ways Seed Mongodump (offline) Mongodump (online) Online replicaset Mongo OPS Manager backups (sharded cluster) Mongo OPS Manager backups (non-sharded cluster) Enter the mongo-specific parameters for your dSource configuration.","title":"Create dSource"},{"location":"Linking.html#dsource-parameters","text":"Parameter Description dSource Type dSource Type Type of dSource seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Source MongoDB Host Connct String Source Instance Connect String onlinemongodump MongoDB Source Database User Source database user onlinemongodump MongoDB Password Source database password onlinemongodump Enable logsync Capture oplogs onlinemongodump Staging MongoDB Host Staging host for creating dSource seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Staging Port Staging Port for Mongo Instance seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Mongos Port Port to be used for mongos shardedsource bindIP String default 0.0.0.0 seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Oplog Size Size of oplogs seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Journal commit Interval Internal in ms seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Storage Engine Storage Engine - wiredTiger seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Mount Path Mount Path for instance datafiles seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Backup Metadata File Name Backup datetime - Content : MMDDYYYY_HH24MISS seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Mongo Admin User Mongo Admin User on Staging Host seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump MongoDB Password Mongo Admin User Password on Staging Host seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Source Sharded Cluster Is Source Sharded Cluster shardedsource Config Server Backup File (sharded mongo) replicaset backup file (nonsharded mongo) Backup directory for Mongodump Config Server Backup File Name replicaset backup file (nonsharded mongo) Backup directory for Mongodump shardedsource offlinemongodump, onlinemongodump offlinemongodump, onlinemongodump Shard Backup Files Shard Backup File Full Path. Add File for each Shard shardedsource Enable SSL/TLS Enable SSL/ TLS seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump SSL/TLS Parameters SSL/TLS Parameters (tlsMode, tlsCAFile, tlsPEMKeyFile, sslAllowConnectionsWithoutCertificates) seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump Enable Authentication Enable Authentication seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump User Auth Mode \"None\",\"SCRAM\",\"x509\",\"ldap\" seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump keyfile_path KeyAuth keyfile name (Full Path) seed, shardedsource, nonshardedsource, offlinemongodump, onlinemongodump","title":"dSource Parameters"},{"location":"Linking.html#create-sourceconfig","text":"Every environment contains repositories and each environment may have any number of repositories associated with it. Repository represents the binaries for mongo instance. Each repository can have many SourceConfig which represent mongo instance. There is no sourceconfig generated automatically in mongo-plugin. We need to configure SourceConfig objects through which we can create a dSource. Login to the Delphix Management application. Click Manage. Select Environments. Select the repository Click on + icon ( Shown in next image ) Add required details in Add database section. identity field : Proivide unique name for staging database discoveryType : Keep it as manual Click Add button","title":"Create Sourceconfig"},{"location":"Linking.html#create-dsource_1","text":"dSource is delphix representation of source database copy. It can be of several different types. Create sourceConfig under repository of staging environment Click on Add dSource link. Select appropriate dSource Type Enter mongo-specific parameters for your dSource configuration. Proceed with wizard and submit to create dSource.","title":"Create dSource"},{"location":"Linking.html#seed","text":"This type of dSource is generally used for pure development purpose. There is no source instance associated with it. It creates a empty instance which is managed by delphix and helps to create virtual mongo instance to avail benefits of all delphix features.","title":"Seed"},{"location":"Linking.html#mongodump-offline","text":"This type of dsource is created using mongodump backup file of source mongo instance. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Mongodump (offline)"},{"location":"Linking.html#mongodump-online","text":"This type of dsource is created using mongodump backup file of source mongo instance. It helps to create dsource using online backup. It can run in regular mode or logsync mode. logsync mode helps to capture oplogs for incremental snapsyncs and reduce backup time and size. Periodic backups can be loaded to create timeline of dsource.","title":"Mongodump (online)"},{"location":"Linking.html#online-replicaset","text":"This type of dsource is created by adding secondary member to existing source cluster. This member does not participate in voting and never becomes primary nor serves any read operations. Its the fastest way of capturing incremental and multiple snapshots can be taken to get desired timeline.","title":"Online replicaset"},{"location":"Linking.html#mongo-ops-manager-backups-sharded-cluster","text":"This type of dsource is created using backup file of source mongo instance created by mongo ops manager. It helps to create dsource of sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Mongo OPS Manager backups (sharded cluster)"},{"location":"Linking.html#mongo-ops-manager-backups-non-sharded-cluster","text":"This type of dsource is created using backup file of source mongo instance created by mongo ops manager. It helps to create dsource of non-sharded source cluster. It helps to create dsource using zero touch production. Periodic backups can be loaded to create timeline of dsource.","title":"Mongo OPS Manager backups (non-sharded cluster)"},{"location":"Provisioning.html","text":"Provisioning \u00b6 This topic describes the basic concepts involved with provisioning VDBs from DB2. A dSource is a virtualized representation of a physical or logical source database. As a virtual representation, it cannot be accessed or manipulated using database tools. Instead, you must create a virtual database (VDB) from a dSource snapshot. A VDB is an independent, writable copy of a dSource snapshot. You can also create VDBs from other VDBs. Once you have provisioned a VDB to a target environment, you can also implement snapshot and retention policies for the VDB, which will determine how frequently Delphix Engine will take a database snapshot and how long the snapshots will be retained for recovery and provisioning purposes. Snapshots accumulate over time. To view a snapshot: From the Datasets panel, click the group containing the dSource. Select dSource. Click the TimeFlow tab. The TimeFlow appears as a list of dates, each of which expands to show snapshots from that date. Times, when the VDB has been refreshed, are marked by a blue line between dates. On the TimeFlow, you can also filter by type of snapshot. To do so, click the filter button, which is shaped like an eye. You can scroll through these lists to select the one you want, or you can enter a date and time to search for a specific snapshot. Once you have provisioned a VDB, you can also take snapshots of it. As with the dSource snapshots, you can find these when you select the VDB in the Datasets panel. You can then provision additional VDBs from these VDB snapshots. Dependencies If there are dependencies on the snapshot, you will not be able to delete the snapshot free space; the dependencies rely on the data associated with the snapshot. Provisioning VDB \u00b6 This topic describes how to provision a virtual database (VDB) from a mongo dSource. Prerequisites \u00b6 Install delphix engine 5.3.x and above Install mongo binaries on staging host Execute Discovery on staging host Create dSource on staging host Add target environment to delphix Create VDB \u00b6 Procedure: Login to the Delphix Management application. Click Manage. Select Datasets. Select a dSource. Select a snapshot from which you want to provision. Click Provision VDB icon to open Provision VDB wizard. Select a target environment from the left pane. Select an Installation to use from the dropdown list of available mongo binaries on that environment. Select the Environment User. Enter VDB parameters. Select a Target Group for the VDB. Click the green Plus icon to add a new group, if necessary. Select a Snapshot Policy for the VDB. Click Next. Specify any desired hook operations. Click Next. Review the Provisioning Configuration and Data Management information. Click Submit. When provisioning starts, you can review the progress of the job in the Databases panel, or in the Job History panel of the Dashboard. When provisioning is complete, the VDB will be included in the group you designated and listed in the Databases panel. If you select the VDB in the Databases panel and click the Open icon, you can view its card, which contains information about the database and its Data Management settings.","title":"Provisioning"},{"location":"Provisioning.html#provisioning","text":"This topic describes the basic concepts involved with provisioning VDBs from DB2. A dSource is a virtualized representation of a physical or logical source database. As a virtual representation, it cannot be accessed or manipulated using database tools. Instead, you must create a virtual database (VDB) from a dSource snapshot. A VDB is an independent, writable copy of a dSource snapshot. You can also create VDBs from other VDBs. Once you have provisioned a VDB to a target environment, you can also implement snapshot and retention policies for the VDB, which will determine how frequently Delphix Engine will take a database snapshot and how long the snapshots will be retained for recovery and provisioning purposes. Snapshots accumulate over time. To view a snapshot: From the Datasets panel, click the group containing the dSource. Select dSource. Click the TimeFlow tab. The TimeFlow appears as a list of dates, each of which expands to show snapshots from that date. Times, when the VDB has been refreshed, are marked by a blue line between dates. On the TimeFlow, you can also filter by type of snapshot. To do so, click the filter button, which is shaped like an eye. You can scroll through these lists to select the one you want, or you can enter a date and time to search for a specific snapshot. Once you have provisioned a VDB, you can also take snapshots of it. As with the dSource snapshots, you can find these when you select the VDB in the Datasets panel. You can then provision additional VDBs from these VDB snapshots. Dependencies If there are dependencies on the snapshot, you will not be able to delete the snapshot free space; the dependencies rely on the data associated with the snapshot.","title":"Provisioning"},{"location":"Provisioning.html#provisioning-vdb","text":"This topic describes how to provision a virtual database (VDB) from a mongo dSource.","title":"Provisioning VDB"},{"location":"Provisioning.html#prerequisites","text":"Install delphix engine 5.3.x and above Install mongo binaries on staging host Execute Discovery on staging host Create dSource on staging host Add target environment to delphix","title":"Prerequisites"},{"location":"Provisioning.html#create-vdb","text":"Procedure: Login to the Delphix Management application. Click Manage. Select Datasets. Select a dSource. Select a snapshot from which you want to provision. Click Provision VDB icon to open Provision VDB wizard. Select a target environment from the left pane. Select an Installation to use from the dropdown list of available mongo binaries on that environment. Select the Environment User. Enter VDB parameters. Select a Target Group for the VDB. Click the green Plus icon to add a new group, if necessary. Select a Snapshot Policy for the VDB. Click Next. Specify any desired hook operations. Click Next. Review the Provisioning Configuration and Data Management information. Click Submit. When provisioning starts, you can review the progress of the job in the Databases panel, or in the Job History panel of the Dashboard. When provisioning is complete, the VDB will be included in the group you designated and listed in the Databases panel. If you select the VDB in the Databases panel and click the Open icon, you can view its card, which contains information about the database and its Data Management settings.","title":"Create VDB"},{"location":"Release%20Notes.html","text":"Release Notes \u00b6 Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog [1.0.0] - 2021-09-20 \u00b6 Added \u00b6 First Version","title":"Release Notes"},{"location":"Release%20Notes.html#release-notes","text":"","title":"Release Notes"},{"location":"Release%20Notes.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog","title":"Changelog"},{"location":"Release%20Notes.html#100-2021-09-20","text":"","title":"[1.0.0] - 2021-09-20"},{"location":"Release%20Notes.html#added","text":"First Version","title":"Added"},{"location":"Troubleshooting.html","text":"Plugin Logs \u00b6 Download the Plugin logs using the following methods: Using dvp dvp download-logs -c plugin_config.yml -e -u admin --password Using GUI Help --> Supports Logs --> Plugin Logs --> Download Instance Logs \u00b6 please verify logs at < mount_point >/logs/dlpx.s?m?.< port >.mongod.log","title":"Troubleshooting"},{"location":"Troubleshooting.html#plugin-logs","text":"Download the Plugin logs using the following methods: Using dvp dvp download-logs -c plugin_config.yml -e -u admin --password Using GUI Help --> Supports Logs --> Plugin Logs --> Download","title":"Plugin Logs"},{"location":"Troubleshooting.html#instance-logs","text":"please verify logs at < mount_point >/logs/dlpx.s?m?.< port >.mongod.log","title":"Instance Logs"}]}